[{"content":"Intro  We\u0026rsquo;ll be using yml/yaml format for all examples down below, I recommend using yml over toml as it is easier to read. You can find any YML to TOML converters if necessary.   Guide Follow Quick Start guide to setup hugo and create a new site.\n Note: Use -f to select yml format\nhugo new site \u0026lt;name of site\u0026gt; -f yml\n Make sure you install latest version of hugo(\u0026gt;=0.83.0).\nAfter you have created a new site, at Step 3 follow the steps:\nMethod 1 Inside the folder of your Hugo site, run:\ngit clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 Note: You may use  --branch v5.0 to end of above command if you want to stick to specific release.\n Updating theme :\ncd themes/PaperMod git pull  Method 2 You can use as submodule with\ngit submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod --depth=1 git submodule update --init --recursive # needed when you reclone your repo (submodules may not get cloned automatically) Note: You may use  --branch v5.0 to end of above command if you want to stick to specific release.\n Updating theme :\ngit submodule update --remote --merge  Method 3 Or you can Download as Zip from Github Page and extract in your themes directory\nDirect Links:\n Master Branch (Latest) v5.0 v4.0 v3.0 v2.0 v1.0  Finally \u0026hellip; Add in config.yml:\ntheme:\u0026#34;PaperMod\u0026#34;Method 4   Install Go programming language in your operating system.\n  Intialize your own hugo mod\n  hugo mod init YOUR_OWN_GIT_REPOSITORY  Add PaperMod in your config.yml file  module:\rimports:\r- path: github.com/adityatelange/hugo-PaperMod  Update theme  hugo mod get -u  Quick Links   Papermod - Features   Papermod - FAQs   Papermod - Variables   Papermod - Icons   ChangeLog    Sample config.yml  Example Site Structure is present here: exampleSite\n Use appropriately\nbaseURL:\u0026#34;https://examplesite.com/\u0026#34;title:ExampleSitepaginate:5theme:PaperModenableRobotsTXT:truebuildDrafts:falsebuildFuture:falsebuildExpired:falsepygmentsUseClasses:truegoogleAnalytics:UA-123-45minify:disableXML:trueminifyOutput:trueparams:env:production# to enable google analytics, opengraph, twitter-cards and schema.title:ExampleSitedescription:\u0026#34;ExampleSite description\u0026#34;keywords:[Blog, Portfolio, PaperMod]author:Me# author: [\u0026#34;Me\u0026#34;, \u0026#34;You\u0026#34;] # multiple authorsimages:[\u0026#34;\u0026lt;link or path of image for opengraph, twitter-cards\u0026gt;\u0026#34;]DateFormat:\u0026#34;January 2, 2006\u0026#34;defaultTheme:auto# dark, lightdisableThemeToggle:falseShowReadingTime:trueShowShareButtons:trueShowPostNavLinks:trueShowBreadCrumbs:trueShowCodeCopyButtons:falsedisableSpecial1stPost:falsedisableScrollToTop:falsecomments:falsehidemeta:falsehideSummary:falseshowtoc:falsetocopen:falseassets:# disableHLJS: true # to disable highlight.js# disableFingerprinting: truefavicon:\u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34;favicon16x16:\u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34;favicon32x32:\u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34;apple_touch_icon:\u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34;safari_pinned_tab:\u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34;label:text:\u0026#34;Home\u0026#34;icon:/apple-touch-icon.pngiconHeight:35# profile-modeprofileMode:enabled:false# needs to be explicitly settitle:ExampleSitesubtitle:\u0026#34;This is subtitle\u0026#34;imageUrl:\u0026#34;\u0026lt;img location\u0026gt;\u0026#34;imageWidth:120imageHeight:120imageTitle:my imagebuttons:- name:Postsurl:posts- name:Tagsurl:tags# home-info modehomeInfoParams:Title:\u0026#34;Hi there \\U0001F44B\u0026#34;Content:Welcome to my blogsocialIcons:- name:twitterurl:\u0026#34;https://twitter.com/\u0026#34;- name:stackoverflowurl:\u0026#34;https://stackoverflow.com\u0026#34;- name:githuburl:\u0026#34;https://github.com/\u0026#34;analytics:google:SiteVerificationTag:\u0026#34;XYZabc\u0026#34;bing:SiteVerificationTag:\u0026#34;XYZabc\u0026#34;yandex:SiteVerificationTag:\u0026#34;XYZabc\u0026#34;cover:hidden:true# hide everywhere but not in structured datahiddenInList:true# hide on list pages and homehiddenInSingle:true# hide on single pageeditPost:URL:\u0026#34;https://github.com/\u0026lt;path_to_repo\u0026gt;/content\u0026#34;Text:\u0026#34;Suggest Changes\u0026#34;# edit textappendFilePath:true# to append file path to Edit link# for search# https://fusejs.io/api/options.htmlfuseOpts:isCaseSensitive:falseshouldSort:truelocation:0distance:1000threshold:0.4minMatchCharLength:0keys:[\u0026#34;title\u0026#34;,\u0026#34;permalink\u0026#34;,\u0026#34;summary\u0026#34;,\u0026#34;content\u0026#34;]menu:main:- identifier:categoriesname:categoriesurl:/categories/weight:10- identifier:tagsname:tagsurl:/tags/weight:20- identifier:examplename:example.orgurl:https://example.orgweight:30# Read: https://github.com/adityatelange/hugo-PaperMod/wiki/FAQs#using-hugos-syntax-highlighter-chroma# pygmentsUseClasses: true# markup:# highlight:# # anchorLineNos: true# codeFences: true# guessSyntax: true# lineNos: true# style: monokai Sample Page.md ---title:\u0026#34;My 1st post\u0026#34;date:2020-09-15T11:30:03+00:00# weight: 1# aliases: [\u0026#34;/first\u0026#34;]tags:[\u0026#34;first\u0026#34;]author:\u0026#34;Me\u0026#34;# author: [\u0026#34;Me\u0026#34;, \u0026#34;You\u0026#34;] # multiple authorsshowToc:trueTocOpen:falsedraft:falsehidemeta:falsecomments:falsedescription:\u0026#34;Desc Text.\u0026#34;canonicalURL:\u0026#34;https://canonical.url/to/page\u0026#34;disableHLJS:true# to disable highlightjsdisableShare:falsedisableHLJS:falsehideSummary:falsesearchHidden:trueShowReadingTime:trueShowBreadCrumbs:trueShowPostNavLinks:trueShowRssButtonInSectionTermList:truecover:image:\u0026#34;\u0026lt;image path/url\u0026gt;\u0026#34;# image path/urlalt:\u0026#34;\u0026lt;alt text\u0026gt;\u0026#34;# alt textcaption:\u0026#34;\u0026lt;text\u0026gt;\u0026#34;# display caption under coverrelative:false# when using page bundles set this to truehidden:true# only hide on current single pageeditPost:URL:\u0026#34;https://github.com/\u0026lt;path_to_repo\u0026gt;/content\u0026#34;Text:\u0026#34;Suggest Changes\u0026#34;# edit textappendFilePath:true# to append file path to Edit link---You can use it by creating archetypes/post.md\nhugo new --kind post \u0026lt;name\u0026gt;  ","permalink":"https://hzw9527.github.io/posts/papermod/papermod-installation/","summary":"Read Install and Update instructions here","title":"Installation | Update"},{"content":"Intro   We\u0026rsquo;ll be using yml/yaml format for all examples down below, I recommend using yml over toml as it is easier to read.\n  You can find any YML to TOML converters if necessary.\n   Assets (js/css) The following is enabled by default\n minification - makes the assets size smallest as possible. bundling - bundles all the styles in one single asset fingerprint/integrity check.   Default Theme light/dark/auto params:# defaultTheme: light# defaultTheme: darkdefaultTheme:auto# to switch between dark or light according to browser theme\r Theme Switch Toggle (enabled by default) Shows icon besides title of page to change theme\nTo disable it :\ndisableThemeToggle:trueYou can refer following table for better understanding\u0026hellip;\n   defaultTheme disableThemeToggle checks local storage? checks system theme? Info     auto true No Yes only system theme    false Yes (if not-\u0026gt;2) Yes (2) switch present   dark true No No force dark only    false Yes No switch present   light true No No force light only    false Yes No switch present     Archives Layout Create a page with archive.md in content directory with following content\n. ├── config.yml ├── content/ │ ├── archives.md \u0026lt;--- Create archive.md here │ └── posts/ ├── static/ └── themes/ └── PaperMod/ and add the following to it\n---title:\u0026#34;Archive\u0026#34;layout:\u0026#34;archives\u0026#34;url:\u0026#34;/archives/\u0026#34;summary:archives---Note: Archives Layout does not support Multilingual Month Translations.\nex: archives.md\n Regular Mode (default-mode)  Home-Info Mode Use 1st entry as some Information\nadd following to config file\nparams:homeInfoParams:Title:Hi there waveContent:Can be Info, links, about...socialIcons:# optional- name:\u0026#34;\u0026lt;platform\u0026gt;\u0026#34;url:\u0026#34;\u0026lt;link\u0026gt;\u0026#34;- name:\u0026#34;\u0026lt;platform 2\u0026gt;\u0026#34;url:\u0026#34;\u0026lt;link2\u0026gt;\u0026#34;ex. config.yml#L106\n Profile Mode Shows Index/Home page as Full Page with Social Links and Image\nadd following to config file\nparams:profileMode:enabled:truetitle:\u0026#34;\u0026lt;Title\u0026gt;\u0026#34;# optional default will be site titlesubtitle:\u0026#34;This is subtitle\u0026#34;imageUrl:\u0026#34;\u0026lt;image link\u0026gt;\u0026#34;# optionalimageTitle:\u0026#34;\u0026lt;title of image as alt\u0026gt;\u0026#34;# optionalimageWidth:120# custom sizeimageHeight:120# custom sizebuttons:- name:Archiveurl:\u0026#34;/archive\u0026#34;- name:Githuburl:\u0026#34;https://github.com/\u0026#34;socialIcons:# optional- name:\u0026#34;\u0026lt;platform\u0026gt;\u0026#34;url:\u0026#34;\u0026lt;link\u0026gt;\u0026#34;- name:\u0026#34;\u0026lt;platform 2\u0026gt;\u0026#34;url:\u0026#34;\u0026lt;link2\u0026gt;\u0026#34; Search Page PaperMod uses Fuse.js Basic for seach functionality\nAdd the following to site config, config.yml\noutputs:home:- HTML- RSS- JSON# is necessaryCreate a page with search.md in content directory with following content\n---title:\u0026#34;Search\u0026#34;# in any language you wantlayout:\u0026#34;search\u0026#34;# is necessary# url: \u0026#34;/archive\u0026#34;# description: \u0026#34;Description for Search\u0026#34;summary:\u0026#34;search\u0026#34;---To hide a particular page from being searched, add it in post\u0026rsquo;s fron\u0026rsquo;t matter\n---searchHidden:trueex: search.md\n Search Page also has Key bindings:\n Arrow keys to move up/down the list Enter key (return) or Right Arrow key to Go to highlighted page Escape key to clear searchbox and results   For Multilingual use search.\u0026lt;lang\u0026gt;.md ex. search.es.md.\nNote: Search will work only on current language, user is currently on !\nCustomizing Fusejs Options\nRefer https://fusejs.io/api/options.html for Options, Add those as shown below.\nparams:fuseOpts:isCaseSensitive:falseshouldSort:truelocation:0distance:1000threshold:0.4minMatchCharLength:0keys:[\u0026#34;title\u0026#34;,\u0026#34;permalink\u0026#34;,\u0026#34;summary\u0026#34;,\u0026#34;content\u0026#34;] Draft Page indication adds [draft] mark to indicate draft pages.\n Post Cover Image In post\u0026rsquo;s page-variables add :\ncover:image:\u0026#34;\u0026lt;image path/url\u0026gt;\u0026#34;# can also paste direct link from external site# ex. https://i.ibb.co/K0HVPBd/paper-mod-profilemode.pngalt:\u0026#34;\u0026lt;alt text\u0026gt;\u0026#34;caption:\u0026#34;\u0026lt;text\u0026gt;\u0026#34;relative:false# To use relative path for cover image, used in hugo Page-bundlesWhen you include images in the Page Bundle, multiple sizes of the image will automatically be provided using the HTML5 srcset field.\nTo reduce generation time and size of the site, you can disable this feature using\nparams:cover:responsiveImages:falseTo enable hyperlinks to the full image size on post pages, use\nparams:cover:linkFullImages:true Share Buttons on post Displays Share Buttons at Bottom of each post\nto show share buttons add\nparams:ShowShareButtons:true Show post reading time Displays Reading Time (the estimated time, in minutes, it takes to read the content.)\nTo show reading time add\nParams:ShowReadingTime:true Show Table of Contents (Toc) on blog post Displays ToC on blog-pages\nTo show ToC add following to page-variables\nShowToc:trueTo keep Toc Open by default on a post add following to page-variables:\nTocOpen:true BreadCrumb Navigation Adds BreadCrumb Navigation above Post\u0026rsquo;s Title to show subsections and Navigation to Home\nparams:ShowBreadCrumbs:trueCan be diabled for particular page\u0026rsquo;s front-matter\n---ShowBreadCrumbs:false--- Edit Link for Posts Add a button to suggest changes by using the file path of the post to link to a edit destination.\nFor site config use:\nParams:editPost:URL:\u0026#34;https://github.com/\u0026lt;path_to_repo\u0026gt;/content\u0026#34;Text:\u0026#34;Suggest Changes\u0026#34;# edit textappendFilePath:true# to append file path to Edit linkCan be modified for individual pages\n---editPost:URL:\u0026#34;https://github.com/\u0026lt;path_to_repo\u0026gt;/content\u0026#34;Text:\u0026#34;Suggest Changes\u0026#34;# edit textappendFilePath:true# to append file path to Edit link---The example above would yield the following link for the post file posts/post-name.md: https://github.com/\u0026lt;path_to_repo\u0026gt;/content/posts/post-name.md\n   Parameter Required Default Value     editPost.URL true -   editPost.appendFilePath false false   editPost.Text false \u0026ldquo;Edit\u0026rdquo;    Since the link generated is a regular HTML anchor tag \u0026lt;a href=...\u0026gt;, you can also use other URL schemas like mailto://, e.g. URL: \u0026quot;mailto://mail@example.com?subject=Suggesting changes for \u0026quot;\n Other Posts suggestion below a post Adds a Previous / Next post suggestion under a single post\nparams:ShowPostNavLinks:true Multiple Authors To Use multiple authors for a post, in post-variables:\n---author:[\u0026#34;Me\u0026#34;,\u0026#34;You\u0026#34;]---To use Multiple Authors Site-wide, in config.yml:\nparams:author:[\u0026#34;Me\u0026#34;,\u0026#34;You\u0026#34;] Comments to add comments, create a html file\nlayouts/partials/comments.html\nand paste code provided by your comments provider\nalso in config add this\nparams:comments:trueread more about this hugo-comments\n AccessKeys c - ToC Open/Close g - Go To Top h - Home (according to current lang) t - Theme toggle / - Jumps to search page if in menu What\u0026rsquo;s AccessKeys ?\n Enhanced SEO Enabled only when env: production\n Rich Results/Snippets Support  Twitter Cards Support  The Twitter Cards metadata, except twitter:image should not require additional configuration, since it is generated from metadata that you should already have (for instance the page title and description). The twitter:image uses the Post Cover Image, if present. In the absence of a cover images, the first image from the images frontmatter (a list) is used. images:- image_01.png- image_02.png Finally, if neither of those are provided, twitter:image comes from the first Page Bundle image with feature in the name, with a fallback to the first image with cover or thumbnail in the name.  OpenGraph support  The OpenGraph metadata, except og:image should not require additional configuration, since it is generated from metadata that you should already have (for instance the page title and description). The og:image uses the Post Cover Image, if present. In the absence of a cover images, the first image from the images frontmatter (a list) is used. images:- image_01.png- image_02.png Finally, if neither of those are provided, og:image comes from the first Page Bundle image with feature in the name, with a fallback to the first image with cover or thumbnail in the name. For pages, you can also add audio (using frontmatter audio: filename.ext) and/or videos. videos:- filename01.mov- filename02.avi   Multilingual Support  Misc Scroll-Bar themed (by default) Smooth Scroll between in-page links (by default) Scroll-to-Top Button (by default) Displays a Scroll-to-Top button in right-bottom corner Google Analytics integration Syntax highlighting RSS feeds ","permalink":"https://hzw9527.github.io/posts/papermod/papermod-features/","summary":"Learn About All Features in PaperMod","title":"Features"},{"content":"Intro   We\u0026rsquo;ll be using yml/yaml format for all examples down below, I recommend using yml over toml as it is easier to read.\n  You can find any YML to TOML converters if necessary.\n   Override theme template By Hugo\u0026rsquo;s Lookup Order, you can override any part of a theme that you want. The following is a quick example.\nLet\u0026rsquo;s say you wish the list was different. All you have to do is copy the list template:\nyour-site/themes/papermod/layouts/_defaults/list.html And paste it under your own layouts folder:\nyour-site/layouts/_defaults/list.html Then you\u0026rsquo;re free to make any changes you want to the list. When Hugo builds your site, your copy of list.html will be used instead of the theme\u0026rsquo;s list.html.\n Enable Social-Metadata and SEO These include OpenGraph, Twitter Cards and Schema.\nparams:env:productionor set HUGO_ENV as \u0026ldquo;production\u0026rdquo; in system env-vars\n Failed to find a valid digest in the \u0026lsquo;integrity\u0026rsquo; attribute for resource \u0026hellip; ? Read about How Subresource Integrity helps: Subresource_Integrity\nWhy was the asset not loading ? : How_browsers_handle_Subresource_Integrity\nSolution:\nSet the following in config.yml\nparams:assets:disableFingerprinting:trueLinked Issues:\n https://stackoverflow.com/questions/65056585/hugo-theme-not-loading https://stackoverflow.com/questions/65040931/hugo-failed-to-find-a-valid-digest-in-the-integrity-attribute-for-resource https://blog.gerardbeckerleg.com/posts/hugo-failed-to-find-a-valid-digest-in-the-integrity-attribute-for-resource/   Bundling Custom css with theme\u0026rsquo;s assets  For adding custom css to be bundled inside one minimized css  Create folder in yout project directory as\n.(site root)\r├── config.yml\r├── content/\r├── theme/hugo-PaperMod/\r└── assets/\r└── css/\r└── extended/ \u0026lt;---\r├── custom_css1.css \u0026lt;---\r└── any_name.css \u0026lt;--- All css files inside assets/css/extended will be bundled !\nNote: blank.css is just the placeholder so that it doesn\u0026rsquo;t break the theme when no files are present under assets/css/extended\nLinked Issues:\n Papermod Theme: How to add custom CSS?   Custom Head / Footer Custom css/js can be added by way mentioned below.\n.(site root)\r├── config.yml\r├── content/\r├── theme/hugo-PaperMod/\r└── layouts\r├── partials\r│ ├── comments.html\r│ ├── extend_footer.html \u0026lt;---\r│ └── extend_head.html \u0026lt;---\r└── robots.txt Create a html page in directory structure as shown above.\nContents of extend_head.html will be added to head of page.\nand contents of extend_footer.html will be added to bottom of page.\n Add menu to site You can add menu entries which will appear in the header of every page.\nTo do so, add a menu section to your site\u0026rsquo;s config.yml:\nmenu:main:- identifier:categoriesname:categoriesurl:/categories/weight:10- identifier:tagsname:tagsurl:/tags/weight:20- identifier:examplename:example.orgurl:https://example.orgweight:30name controls what will be displayed for the menu entry. url sets the URL that the entry points to. weight is used to control the positioning of entries.\nFor more information on menus, see the Hugo wiki page.\n Pin a Post Post can be pinned/ displayed top on the list by adding a weight=\u0026lt;num\u0026gt; var to page-variables\nexample:\n---title:\u0026#34;My Important post\u0026#34;date:2020-09-15T11:30:03+00:00weight:1------title:\u0026#34;My 2nd Important post\u0026#34;date:2020-09-15T11:30:03+00:00weight:2--- Adding Custom Favicon(s) We support the following paths under /static directory and can be added accordingly.\n favicon.ico favicon-16x16.png favicon-32x32.png apple-touch-icon.png safari-pinned-tab.svg    Favicon(s) can be generated by Favicon.io\nand can be simply put in /static folder.\n  Other way is to add favicon(s) NOT located in /static folder.\nIn site config add the following:\nparams:\rassets:\rfavicon: \u0026#34;\u0026lt;link / absolute url\u0026gt;\u0026#34;\rfavicon16x16: \u0026#34;\u0026lt;link / absolute url\u0026gt;\u0026#34;\rfavicon32x32: \u0026#34;\u0026lt;link / absolute url\u0026gt;\u0026#34;\rapple_touch_icon: \u0026#34;\u0026lt;link / absolute url\u0026gt;\u0026#34;\rsafari_pinned_tab: \u0026#34;\u0026lt;link / absolute url\u0026gt;\u0026#34;  absolute url means direct links to external resource: ex. https://web.site/someimage.png  example:\nparams:\rassets:\rfavicon: \u0026#34;/favicon.ico\u0026#34;\rfavicon16x16: \u0026#34;/favicon-16x16.png\u0026#34;\rfavicon32x32: \u0026#34;/favicon-32x32.png\u0026#34;\rapple_touch_icon: \u0026#34;/apple-touch-icon.png\u0026#34;\rsafari_pinned_tab: \u0026#34;/safari-pinned-tab.svg\u0026#34;    Centering image in markdown Add #center after image to center align an image\n![name](path/to/image.png#center) When using figure shortcode\nuse align=center to center image with captions\nex.\n{{\u0026lt; figure align=center src=\u0026#34;image.jpg\u0026#34; \u0026gt;}}  Using Hugo\u0026rsquo;s Syntax highlighter \u0026ldquo;chroma\u0026rdquo;   Disable Highlight.js in site config.yml\nparams:assets:disableHLJS:true  Set hugo\u0026rsquo;s markdown styling in site config.yml\nmarkup:highlight:# anchorLineNos: truecodeFences:trueguessSyntax:truelineNos:true# noClasses: falsestyle:monokai  If you want lineNos: true, the background won\u0026rsquo;t be proper. This will only work with noClasses: false or pygmentsUseClasses: true. Read Generate Syntax Highlighter CSS\nAdd the following to assets/css/extended/custom.css\n.chroma { background-color: unset; } More Info : Configure Markup - Highlight\n   Search not working ? If you are using a CDN to server assets from a different domain, search would break\nWhy? Take a look at fastsearch.js#L35.\nWe fetch the index.json (where the search function looks for the keywords typed) one level up of the website search.min.js is hosted on.\nWe have used this insted of assigning baseURL so as to work with multilingual websites ex. example.com/fr/ and websites being placed under a subdirectory ex. example.com/blog/.\nTo fix for single language websites hosting assets from CDN, this you may override fastsearch.js#L35 and placing appropriate URL as in\nxhr.open(\u0026#34;GET\u0026#34;, \u0026#34;https://example.com/index.json\u0026#34;);  References  Override a Hugo theme  ","permalink":"https://hzw9527.github.io/posts/papermod/papermod-faq/","summary":"Frequently Asked Questions","title":"FAQs"},{"content":"Social Icons    No. Name Platform Link     1 123rf 123rf.com   2 adobestock stock.adobe.com   3 behance behance.net   4 buymeacoffee buymeacoffee.com   5 codepen codepen.io   6 cryptohack cryptohack.org   7 ctftime ctftime.org   8 dev dev.to   9 discogs discogs.com   10 discord discord.com   11 dreamstime dreamstime.com   12 dribbble dribbble.com   13 email -   14 facebook facebook.com   15 flickr flickr.com   16 freepik freepik.com   17 gitea gitea.io   18 github github.com   19 gitlab gitlab.com   20 goodreads goodreads.com   21 hackerone hackerone.com   22 hackerrank hackerrank.com   23 hackthebox hackthebox.eu   24 instagram instagram.com   25 itchio itch.io   26 kakaotalk kakaocorp.com/service/KakaoTalk   27 keybase keybase.io   28 kofi ko-fi.com   29 lastfm last.fm   30 liberapay liberapay.com   31 linkedin linkedin.com   32 mastodon mastodon.social   33 matrix matrix.org   34 medium medium.com   35 mixcloud mixcloud.com   36 nuget nuget.org   37 paypal paypal.com   38 qq qq.com   39 reddit reddit.com   40 rss -   41 serverfault serverfault.com   42 soundcloud soundcloud.com   43 shutterstock shutterstock.com   44 slack slack.com   45 snapchat snapchat.com/add   46 sourcerer sourcerer.io   47 spotify spotify.com   48 stackoverflow stackoverflow.com   49 steam steampowered.com   50 telegram telegram.org   51 twitch twitch.tv   52 twitter twitter.com   53 unsplash unsplash.com   54 xda xda-developers.com   55 youtube youtube.com   56 other -    Usage :\nsocialIcons:\r- name: \u0026#34;kofi\u0026#34;\rurl: \u0026#34;https://kofi.com\u0026#34;\r- name: \u0026#34;twitter\u0026#34;\rurl: \u0026#34;https://twitter.com\u0026#34;  Share Icons    No. Platform     1 twitter (also generates hash tags from tags linked with post)   2 linkedin   3 reddit   4 facebook   5 whatsapp   6 telegram    Usage:\nparams:ShowShareButtons:true","permalink":"https://hzw9527.github.io/posts/papermod/papermod-icons/","summary":"List of all Icons supported by PaperMod","title":"Icons"},{"content":"Below are variables used with this theme\u0026hellip;\n Site Variables under Params    name type example Description     env string \u0026lsquo;production\u0026rsquo; To set env to production   title string \u0026lsquo;My Blog\u0026rsquo; To set title   description string \u0026lsquo;This is a blog of mine\u0026rsquo; To set site description   author string |list \u0026lsquo;Me\u0026rsquo; | [\u0026lsquo;Me\u0026rsquo;,\u0026lsquo;You\u0026rsquo;] To show multiple Authors   images string \u0026lsquo;myimage.png\u0026rsquo; Link or path of image for opengraph, twitter-cards   keywords list [blog, page] Add keywords for Home page   DateFormat string \u0026ldquo;January 2, 2006\u0026rdquo; The format of date strings in the website. Details   languageAltTitle string \u0026ldquo;English\u0026rdquo; Alternate title in Multilingual Mode   ShowReadingTime boolean true | false To show read time in post meta   ShowShareButtons boolean true | false To show/hide share buttons under post   ShowCodeCopyButtons boolean true | false To show/hide Code Copy button   ShowRssButtonInSectionTermList boolean true | false To show/hide RSS Copy button in Section and Term list   ShowFullTextinRSS boolean true | false To show Content in RSS feed   defaultTheme string light | dark | auto To set default theme   disableThemeToggle boolean true | false To disable theme toggle icon shown besides label   disableSpecial1stPost boolean true | false To disable no-card special appearance of 1st post   disableScrollToTop boolean true | false To disable ScrollToTop button   disableAnchoredHeadings boolean true | false To disable Anchored Headings   hideMeta boolean true | false To Hide meta elements : date, read-time, author and available-translations for page   hideSummary boolean true | false To Hide summary being shown in list pages   showtoc boolean true | false To show/hide Table of Contents   tocopen boolean true | false To keep open ToC by default on page load   ShowPostNavLinks boolean true | false Show Previous and Next Posts below a Post   ShowBreadCrumbs boolean true | false Show BreadCrumb Navigation above single post/page   comments boolean true | false To show/hide comments   analytics.google.SiteVerificationTag string \u0026ldquo;XYZabc\u0026rdquo; Site Verification Tag for Google Analytics   analytics.bing.SiteVerificationTag string \u0026ldquo;XYZabc\u0026rdquo; Site Verification Tag for Bing   analytics.yandex.SiteVerificationTag string \u0026ldquo;XYZabc\u0026rdquo; Site Verification Tag for Yandex   schema - - Details   fuseOpts - - Details   socialIcons - - Details   label - - Details   assets - - Details   cover - - Details   profileMode - - Details   editPost - - Details    Site Variables    name type example Description     copyright string **[example.site](https://example.site)** This is HUGO\u0026rsquo;s site variable, which can also render markdown content    label    name type example Description     label.text string \u0026lsquo;Home\u0026rsquo; To display different label text other than title   label.icon string \u0026lsquo;/apple-touch-icon.png\u0026rsquo; To display a logo image in label   label.iconHeight integer 35 To set size of label logo image    profileMode    name type example Description     profileMode.enabled boolean true | false For enabling profileMode, needs to be explicitly set   profileMode.title string \u0026ldquo;Title\u0026rdquo; Title   profileMode.subtitle string \u0026ldquo;subtitle here\u0026rdquo; Subtitle   profileMode.imageUrl string \u0026ldquo;image.png\u0026rdquo; | \u0026ldquo;https://example.com/image.jpg\u0026quot; Image URL or Link   profileMode.imageWidth  string \u0026ldquo;150\u0026rdquo; Width of image   profileMode.imageHeight string \u0026ldquo;150\u0026rdquo; Height of image   profileMode.imageTitle string \u0026ldquo;This image is a picture of ..\u0026rdquo; Title of image   profileMode.buttons - - Details    profileMode.buttons profileMode:buttons:- name:Archiveurl:\u0026#34;/archive\u0026#34;- name:Githuburl:\u0026#34;https://github.com/\u0026#34;assets    name type example Description     assets.favicon string \u0026lsquo;icon.ico\u0026rsquo; To set favicon, can be path or external link   assets.disableHLJS boolean true | false To disable Highlight.js loading   assets.disableFingerprinting boolean true | false To disable Sub-Resource integrity for assets    cover    name type example Description     cover.linkFullImages boolean true | false To open full size cover images on click on cover   cover.responsiveImages boolean true | false To enable/disable generation of responsive cover images   cover.hidden boolean true | false To hide everywhere but not in structured data   cover.hiddenInList boolean true | false To hide on list pages and home   cover.hiddenInSingle  boolean true | false To hide on list pages and home    schema    name type example Description     schema.publisherType string \u0026lsquo;Organization\u0026rsquo; https://schema.org/publisher   schema.sameAs list [\u0026ldquo;URL1\u0026rdquo;, \u0026ldquo;URL2\u0026rdquo;] Set https://schema.org/sameAs    fuseOpts Refer: https://fusejs.io/api/options.html\nfuseOpts:isCaseSensitive:falseshouldSort:truelocation:0distance:1000threshold:0.4minMatchCharLength:0keys:[\u0026#34;title\u0026#34;,\u0026#34;permalink\u0026#34;,\u0026#34;summary\u0026#34;,\u0026#34;content\u0026#34;]## can be less but not more than shown in listsocialIcons socialIcons:- name:\u0026#34;\u0026lt;platform\u0026gt;\u0026#34;url:\u0026#34;\u0026lt;link\u0026gt;\u0026#34;- name:\u0026#34;\u0026lt;platform 2\u0026gt;\u0026#34;url:\u0026#34;\u0026lt;link2\u0026gt;\u0026#34;editPost editPost:URL:\u0026#34;https://github.com/\u0026lt;path_to_repo\u0026gt;/content\u0026#34;Text:\u0026#34;Suggest Changes\u0026#34;# edit textappendFilePath:true# to append file path to Edit link Note: Same format is being used by Page Variables\n  Page Variables    Name Type Example Description     showtoc boolean true | false To show/hide Table of Contents   tocopen boolean true | false To keep open ToC by default on page load   hidemeta boolean true | false To Hide meta elements : date, read-time, author and available-translations for page   comments boolean true | false To show/hide comments   description string \u0026lsquo;description text\u0026rsquo; Show Post Description under Title   canonicalURL string \u0026ldquo;https://canonical.url/to/page\u0026quot; To add canonical URL to posts   disableShare boolean true | false To hide/show share icons under a page   disableHLJS boolean true | false To disable Highlight.js loading   disableAnchoredHeadings boolean true | false To disable Anchored Headings   searchHidden boolean true | false Hide page from search   hideSummary boolean true | false To Hide summary being shown in list pages   ShowReadingTime boolean true | false To show read time in post meta   ShowBreadCrumbs boolean true | false Show BreadCrumb Navigation above single post/page   ShowPostNavLinks boolean true | false Show Previous and Next Posts below a Post   ShowRssButtonInSectionTermList boolean true | false To show/hide RSS Copy button in Section and Term list   author string |list \u0026lsquo;Me\u0026rsquo; | [\u0026lsquo;Me\u0026rsquo;,\u0026lsquo;You\u0026rsquo;] To show multiple Authors   cover.image string \u0026lsquo;featured.jpg\u0026rsquo; To add a cover image   cover.caption  string \u0026lsquo;caption for image\u0026rsquo; To add caption to cover image   cover.alt string \u0026rsquo;this is cover image\u0026rsquo; Alternate text to show if image doesn\u0026rsquo;t load/show up   cover.relative boolean true | false To use relative path for cover image, used in hugo Page-bundles   cover.hidden  boolean true | false To hide on current single page   weight  integer 5 To set page order or to pin a post to Top of list    ","permalink":"https://hzw9527.github.io/posts/papermod/papermod-variables/","summary":"List of Front Matter variables used by PaperMod","title":"Variables | Front Matter"},{"content":"使用 pflag 包来解析命令行参数\n1 pflag 是干什么的 pflag 是官方包 flag 的替代品。主要用来解析命令行参数。\n2 安装 go get github.com/spf13/pflag 3 Pflag 包 FlagSet 定义 FlagSet 是一些预先定义好的 Flag 的集合，几乎所有的 Pflag 操作，都需要借助 FlagSet 提供的方法来完成。\n下面这两个其实就是使用了 pflag 包的全局 flagSet\nvar version bool func main() { // 使用自定义的 flagSet  flagSet := flag.NewFlagSet(\u0026#34;test\u0026#34;, flag.ContinueOnError) // BoolVar 不支持短选项  flagSet.BoolVar(\u0026amp;version, \u0026#34;version\u0026#34;, true, \u0026#34;Print version information and quit.\u0026#34;) // 新建一个 flagSet 就需要加上这个解析操作  err := flagSet.Parse(os.Args) if err != nil { return } } 可以使用两种方法来获取并使用 FlagSet：\n3.1 使用全局 FlagSet var version bool func init() { pflag.BoolVarP(\u0026amp;version, \u0026#34;version\u0026#34;, \u0026#34;v\u0026#34;, true, \u0026#34;Print version information and quit.\u0026#34;) } func main() { pflag.Parse() log.Println(\u0026#34;version:\u0026#34;, version) } pflag.BoolVarP 函数定义如下：\nfunc BoolVarP(p *bool, name, shorthand string, value bool, usage string) { flag := CommandLine.VarPF(newBoolValue(value, p), name, shorthand, usage) flag.NoOptDefVal = \u0026#34;true\u0026#34; } CommandLine 是一个包级别的变量，定义为\n// CommandLine is the default set of command-line flags, parsed from os.Args. var CommandLine = NewFlagSet(os.Args[0], ExitOnError) 在一些不需要定义子命令的命令行工具中，我们可以直接使用全局的 FlagSet，更加简单方便\n3.2 使用自定义的 FlagSet // 使用自定义的 flagSet flagSet := flag.NewFlagSet(\u0026#34;test\u0026#34;, flag.ContinueOnError) // BoolVar 不支持短选项 flagSet.BoolVar(\u0026amp;version, \u0026#34;version\u0026#34;, true, \u0026#34;Print version information and quit.\u0026#34;) // 新建一个 flagSet 就需要加上这个解析操作 err := flagSet.Parse(os.Args) if err != nil { return } log.Println(\u0026#34;version:\u0026#34;, version) 使用自定义解析命令行参数时要使用 flagSet.Parse(os.Args) 解析参数。\n4 多种命令行参数定义 var configSuffix string var configName string func main() { // 支持长选项，默认值，使用文本，标志的值存储在指针中  var name = pflag.String(\u0026#34;name\u0026#34;, \u0026#34;colin\u0026#34;, \u0026#34;Input Your Name\u0026#34;) // 支持长选项，短选项，默认值，使用文本，标志的值存储在指针中  var nickName = pflag.StringP(\u0026#34;nickname\u0026#34;, \u0026#34;n\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;Input Your nickName\u0026#34;) // 支持长选项、默认值和使用文本，并将标志的值绑定到变量。  pflag.StringVar(\u0026amp;configSuffix, \u0026#34;configSuffix\u0026#34;, \u0026#34;.yaml\u0026#34;, \u0026#34;Input Your configSuffix\u0026#34;) // 支持长选项、短选项，默认值和使用文本，并将标志的值绑定到变量。  pflag.StringVarP(\u0026amp;configName, \u0026#34;configName\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;config\u0026#34;, \u0026#34;Input Your configName\u0026#34;) pflag.Parse() // 注意这里的取值  log.Println(\u0026#34;name\u0026#34;, *name) log.Println(\u0026#34;nickName\u0026#34;, *nickName) log.Println(\u0026#34;configSuffix\u0026#34;, configSuffix) log.Println(\u0026#34;configName\u0026#34;, configName) }  函数名带Var说明是将标志的值绑定到变量，否则是将标志的值存储在指针中。 函数名带P说明支持短选项，否则不支持短选项。  5 使用Get获取参数的值 可以使用Get来获取标志的值，代表 Pflag 所支持的类型。 例如：有一个 pflag.FlagSet，带有一个名为 flagname 的 int 类型的标志，可以使用GetInt()来获取 int 值。需要注意 flagname 必须存在且必须是 int\ni, err := flagset.GetInt(\u0026#34;flagname\u0026#34;) 获取全局的 flagSet 可以使用 pflag.CommandLine 获取。\n6 获取非选项参数 var ( flagvar = pflag.Int(\u0026#34;flagname\u0026#34;, 1234, \u0026#34;help message for flagname\u0026#34;) ) func main() { pflag.Parse() fmt.Printf(\u0026#34;argument number is: %v\\n\u0026#34;, pflag.NArg()) fmt.Printf(\u0026#34;argument list is: %v\\n\u0026#34;, pflag.Args()) fmt.Printf(\u0026#34;the first argument is: %v\\n\u0026#34;, pflag.Arg(0)) } 执行上述代码，输出如下：\n$ go run example1.go arg1 arg2 argument number is: 2 argument list is: [arg1 arg2] the first argument is: arg1  可以调用pflag.Parse()来解析定义的标志。 解析后，可通过pflag.Args()返回所有的非选项参数， 通过pflag.Arg(i)返回第 i 个非选项参数。参数下标 0 到 pflag.NArg() - 1  7 指定了选项但是没有指定选项值时的默认值 var ( // pflag.Int 没有 var 索引存在变量的指针里面  ip = pflag.IntP(\u0026#34;flagname\u0026#34;, \u0026#34;f\u0026#34;, 1234, \u0026#34;help message for flagname\u0026#34;) ) func main() { // 命令行指定了选项但是没有指定选项值时的默认值  pflag.Lookup(\u0026#34;flagname\u0026#34;).NoOptDefVal = 1 pflag.Parse() log.Printf(\u0026#34;argument flagname is: %v\\n\u0026#34;, *ip) } 上面的代码会产生结果，具体你可以参照下表：\n   命令行参数 解析结果     \u0026ndash;flagname=100 100   \u0026ndash;flagname ip=1   不指定该选项 ip=1234    8 弃用参数 8.1 弃用参数写法 弃用 --flagname 使用 flag-name\nvar ( //ip = pflag.IntP(\u0026#34;flagname\u0026#34;, \u0026#34;f\u0026#34;, 1234, \u0026#34;help message for flagname\u0026#34;)  ip = pflag.IntP(\u0026#34;flagname\u0026#34;, \u0026#34;f\u0026#34;, 1234, \u0026#34;help message for flagname\u0026#34;) flagName = pflag.IntP(\u0026#34;flag-name\u0026#34;, \u0026#34;n\u0026#34;, 1234, \u0026#34;help message for flagname\u0026#34;) ) func main() { //deprecate a flag by specifying its name and a usage message  err := pflag.CommandLine.MarkDeprecated(\u0026#34;flagname\u0026#34;, \u0026#34;please use --flag-name instead\u0026#34;) if err != nil { return } pflag.Parse() log.Printf(\u0026#34;argument flagname is: %v\\n\u0026#34;, *flagName) } -h 提示:\n$ ./example-6.exe -h Usage of G:\\workspace\\go-util\\pkg\\pflg\\example-6\\example-6.exe: -n, --flag-name int help message for flagname (default 1234) pflag: help requested  使用 --flagname 或者 f 时会提示 Flag --flagname has been deprecated, please use --log-mode instead 使用弃用的参数，会打印相应的替换参数说明，提示过后程序执行不会中断，会继续执行。 弃用的参数将不会在 -h 中打出来。  8.2 弃用简写形式 pflag.IntVarP(\u0026amp;port, \u0026#34;port\u0026#34;, \u0026#34;P\u0026#34;, 3306, \u0026#34;MySQL service host port.\u0026#34;) // deprecate a flag shorthand by specifying its flag name and a usage message pflag.CommandLine.MarkShorthandDeprecated(\u0026#34;port\u0026#34;, \u0026#34;please use --port only\u0026#34;) 这样隐藏了帮助文本中的简写 P，并且当使用简写 P 时，打印了Flag shorthand -P has been deprecated, please use --port only。\n8.3 隐藏标志 标志仍将正常运行，但不会显示在 usage/help 文本中。。\n// hide a flag by specifying its name pflag.CommandLine.MarkHidden(\u0026#34;secretFlag\u0026#34;) 9 传值方式 --name=123 | 长形式 -n=123 | 短形式 -n 123 | 短形式 ","permalink":"https://hzw9527.github.io/posts/go/pflag/","summary":"\u003cp\u003e使用 pflag 包来解析命令行参数\u003c/p\u003e","title":"Pflag使用"},{"content":"官方包 flag 介绍\n1 flag 简介 flag 是用来解析命令行参数。\n2 解析命令行参数 package main import ( \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; ) // 定义命令行参数对应的变量，这三个变量都是指针类型 // 参数名称 默认值 参数说明 var cliName = flag.String(\u0026#34;name\u0026#34;, \u0026#34;nick\u0026#34;, \u0026#34;Input Your Name\u0026#34;) var cliAge = flag.Int(\u0026#34;age\u0026#34;, 28, \u0026#34;Input Your Age\u0026#34;) var cliBool = flag.Bool(\u0026#34;large\u0026#34;, false, \u0026#34;Is larger than 18\u0026#34;) // 定义一个值类型的命令行参数变量，在 Init() 函数中对其初始化 // 因此，命令行参数对应变量的定义和初始化是可以分开的 var cliFlag int func Init() { // 绑定变量的使用方式 \t// 绑定同一个变量实现长选项和短选项的方式 \tflag.IntVar(\u0026amp;cliFlag, \u0026#34;flagname\u0026#34;, 1234, \u0026#34;Just for demo\u0026#34;) flag.IntVar(\u0026amp;cliFlag, \u0026#34;f\u0026#34;, 1234, \u0026#34;Just for demo\u0026#34;) } func readFlag() { // 初始化变量 cliFlag \tInit() // 把用户传递的命令行参数解析为对应变量的值 \tflag.Parse() // 输出命令行参数 \tfmt.Println(\u0026#34;name=\u0026#34;, *cliName) fmt.Println(\u0026#34;age=\u0026#34;, *cliAge) fmt.Println(\u0026#34;cliBool=\u0026#34;, *cliBool) fmt.Println(\u0026#34;flagName=\u0026#34;, cliFlag) // flag.Args() 函数返回没有被解析的命令行参数 \t// func NArg() 函数返回没有被解析的命令行参数的个数 \tfmt.Printf(\u0026#34;args=%s, num=%d\\n\u0026#34;, flag.Args(), flag.NArg()) for i := 0; i \u0026lt; flag.NArg(); i++ { fmt.Printf(\u0026#34;arg[%d]=%s\\n\u0026#34;, i, flag.Arg(i)) } } func main() { readFlag() } 3 参数解析方式 --flag=x\r--flag x -flag=x\r-flag x // non-boolean flags only 支持上述四种方式。\n3.1 bool 类型 bool类型\n如果一个变量是 bool 类型,只支持 \u0026ndash;flag=value / -flag=value / -flag 这种形式。 -flag 相当于 -flag=true\n# 相当于 ./cli --cliBool=true，不会报错 $ ./cli --cliBool 3.2 其他类型 其他类型\n对于其他类型来说，\n如果命令行包含参数 \u0026ndash;flag / -flag 不指定值，会报错打印出各个参数的用法。\n$ ./test.exe -name flag needs an argument: -name Usage of G:\\workspace\\go-util\\pkg\\flag\\test\\test.exe: -age int Input Your Age (default 28) -f int Just for demo (default 1234) -flagname int Just for demo (default 1234) -large Is larger than 18 -name string Input Your Name (default \u0026#34;nick\u0026#34;) 3.3 获取其他参数 3.4 其他用法 没有包含参数\n没有包含参数取默认值。\n$ ./test.exe name= nick age= 28 cliBool= false flagName= 1234 args=[], num= 获取参数\n$ ./test.exe --name 123 -large=true - 123 c123 123 args=[- 123 c123 123], num=4 arg[0]=- arg[1]=123 arg[2]=c123 arg[3]=123 name= 123 age= 28 cliBool= true flagName= 1234 ","permalink":"https://hzw9527.github.io/posts/go/flag/","summary":"\u003cp\u003e官方包 flag 介绍\u003c/p\u003e","title":"flag"},{"content":"go 常用的设计模式\n1 简介 设计模式是将软件开发中需要重复性解决的编码场景，按最佳实践的方式抽象成一个模型，模型描述的解决方法就是设计模式。使用设计模式，可以使代码更易于理解，保证代码的重用性和可靠性。\n设计模式可以分为创建型模式、结构型模式、行为型模式 3 大类。\n2 创建型模式 提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。\n常用 单例模式和工厂模式（具体包括简单工厂模式、抽象工厂模式和工厂方法模式三种）。\n2.1 单例模式 单例模式指的是全局只有一个实例，并且它负责创建自己的对象。\n单例模式不仅有利于减少内存开支，还有减少系统性能开销、防止多个实例产生冲突等优点。\n单例模式又分为饿汉方式和懒汉方式。饿汉方式指全局的单例实例在包被加载时创建，而懒汉方式指全局的单例实例在第一次被使用时创建。\n饿汉方式\npackage singleton type singleton struct { } var ins *singleton = \u0026amp;singleton{} func GetInsOr() *singleton { return ins } 实例是在包被导入时初始化的，所以如果初始化耗时，会导致程序加载时间比较长。\n懒汉\n懒汉方式是开源项目中使用最多的，但它的缺点是非并发安全，在实际使用时需要加锁。\n懒汉方式不加锁：\npackage singleton type singleton struct { } var ins *singleton func GetInsOr() *singleton { if ins == nil { ins = \u0026amp;singleton{} } return ins } 创建 ins 时，如果 ins==nil，就会再创建一个 ins 实例，这时候单例就会有多个实例。\n懒汉方式解决并发问题加锁\nimport \u0026#34;sync\u0026#34; type singleton struct { } var ins *singleton var mu sync.Mutex func GetIns() *singleton { if ins == nil { mu.Lock() if ins == nil { ins = \u0026amp;singleton{} } mu.Unlock() } return ins } 除了饿汉方式和懒汉方式，在 Go 开发中，还有一种更优雅的实现方式\npackage singleton import ( \u0026#34;sync\u0026#34; ) type singleton struct { } var ins *singleton var once sync.Once func GetInsOr() *singleton { once.Do(func() { ins = \u0026amp;singleton{} }) return ins }  使用once.Do可以确保 ins 实例全局只被创建一次， once.Do 函数还可以确保当同时有多个创建动作时，只有一个创建动作在被执行。  2.2 工厂模式 简单工厂\n简单工厂模式可以确保我们创建的实例具有需要的参数，进而保证实例的方法可以按预期执行。\ntype Person struct { Name string Age int } func (p Person) Greet() { fmt.Printf(\u0026#34;Hi! My name is %s\u0026#34;, p.Name) } func NewPerson(name string, age int) *Person { return \u0026amp;Person{ Name: name, Age: age, } } 抽象工厂\n它和简单工厂模式的唯一区别，就是它返回的是接口而不是结构体。\n返回接口，可以在你不公开内部实现的情况下，让调用者使用你提供的各种功能\ntype Person interface { Greet() } type person struct { name string age int } func (p person) Greet() { fmt.Printf(\u0026#34;Hi! My name is %s\u0026#34;, p.name) } // Here, NewPerson returns an interface, and not the person struct itself func NewPerson(name string, age int) Person { return person{ name: name, age: age, } } 通过返回接口，我们还可以实现多个工厂函数，来返回不同的接口实现\n// We define a Doer interface, that has the method signature // of the `http.Client` structs `Do` method type Doer interface { Do(req *http.Request) (*http.Response, error) } // This gives us a regular HTTP client from the `net/http` package func NewHTTPClient() Doer { return \u0026amp;http.Client{} } type mockHTTPClient struct{} func (*mockHTTPClient) Do(req *http.Request) (*http.Response, error) { // The `NewRecorder` method of the httptest package gives us  // a new mock request generator  res := httptest.NewRecorder() // calling the `Result` method gives us  // the default empty *http.Response object  return res.Result(), nil } // This gives us a mock HTTP client, which returns // an empty response for any request sent to it func NewMockHTTPClient() Doer { return \u0026amp;mockHTTPClient{} } 在实际开发中，我建议返回非指针的实例， 因为我们主要是想通过创建实例，调用其提供的方法，而不是对实例做更改。 如果需要对实例做更改，可以实现SetXXX的方法。通过返回非指针的实例，可以确保实例的属性，避免属性被意外 / 任意修改。\n工厂方法模式\n工厂方法适合于有一些共同的属性，但是也有自己独特的地方.\n可以通过实现工厂函数来创建多种工厂，将对象创建从由一个对象负责所有具体类的实例化，变成由一群子类来负责对具体类的实例化，从而将过程解耦\ntype Person struct { name string age int } func NewPersonFactory(age int) func(name string) Person { return func(name string) Person { return Person{ name: name, age: age, } } } 然后，我们可以使用此功能来创建具有默认年龄的工厂：\nnewBaby := NewPersonFactory(1) baby := newBaby(\u0026#34;john\u0026#34;) newTeenager := NewPersonFactory(16) teen := newTeenager(\u0026#34;jill\u0026#34;) ","permalink":"https://hzw9527.github.io/posts/go/go_common_design_pattern/","summary":"\u003cp\u003ego 常用的设计模式\u003c/p\u003e","title":"design_pattern"},{"content":"shell 在会话期间维护着成为环境的大量信息\n1 简介 尽管大多数程序使用配置文件保存程序设置，但有些程序会在环境中查找相关信息来调整自身行为。\n printenv：显示部分或者全部环境变量。 set：显示 shell 变量和环境变量。 echo：查看变量内容。 alias：查看命名别名。  2 环境中保存了什么 bash 中保存了两种数据，环境变量和 shell 变量。此外还保存了一些程序化数据，别名和 shell 函数。\n3 环境变量 3.1 检查环境变量 bash 内建命令 set 或者 printenv 查看环境变量。\n环境变量较多可以使用\n$ printenv | less # printenv 也可以列出环境变量的只 $ printenv USER $ echo $USER  set：不加任何参数和选项显示 shell 变量，环境变量以及已定义的 shell 函数，输出命令字母顺序排序。 printenv：只显示环境变量。  环境变量中的别名无法使用set 或者 printenv 查看，使用 alias 命令。\n$ alias alias cp=\u0026#39;cp -i\u0026#39; alias egrep=\u0026#39;egrep --color=auto\u0026#39; alias fgrep=\u0026#39;fgrep --color=auto\u0026#39; alias grep=\u0026#39;grep --color=auto\u0026#39; alias l.=\u0026#39;ls -d .* --color=auto\u0026#39; 3.2 一些常见的环境变量    变量 内容     SHELL shell 程序名称   HOME 主目录的路径名   LANG 定义了字符集以及其所使用语言的排序方式   PATH 冒号分隔的目录列表，shell 会在其中搜索可执行程序   USER 用户名   PWD 当前工作目录    4 如何建立环境 用户登录后，bash 程序启动会读取一系列称为启动文件的配置脚本。这些脚本定义了所有用户的默认环境。接着读取主目录中定义个人环境中的多个启动环境。\n启动顺序和 shell 会话类型有关。\n 登录 shell 会话：需要输入用户名密码。 非登录 shell 会话：GUI 中启动终端或者终端输出 bash。  登录 shell 会话：\n   文件 内容     /etc/profile 应用于所有用户的全局配置脚本   ~/.bash_profile 用户个人启动文件，用于扩展或者覆盖全局配置脚本中的设置   ~/.bash_login 没有找到 ./.bash_profile ，用户会尝试读取该脚本   ~/.profile ~/.bash_profile 和 ~/.bash_login 文件都没有找到，会尝试读取该文件，也是 Debian 发行版 ubuntu 的默认文件    非登录会话\n   文件 内容     /etc/bash.bashrc 应用于所有用户的全局配置脚本   ~/.bashrc 用户个人的启动文件。用于扩展或者覆盖全局配置脚本中的设置    非登录 shell 除了读取上述的配置文件，还会继承父进程的环境。\n对于普通用户来说，~/.bashrc 是非常重要的启动文件。该文件基本上总是会被读取，登录 shell 的大多数启动文件会读取它，非登录 shell 恢复会默认读取它。\npath 环境变量通常是由启动文件 /etc/profile 中下面这行设置的。\nPATH=$PATH:$HOME/bin $PATH 后面追加 $HOME/bin，是参数扩展的一个例子，当输入命令时，$HOME/bin 目录处于被搜索的路径列表中。\n默认情况下，在用户的主目录下创建一个 bin 目录，给予 debian 的系统（ubuntu）会在登录时测试 ~/bin 是否存在，并动态的加入到环境变量中（如果存在）。\n5 文本编辑器编辑配置文件 # 编辑配置文件记得备份 $ cp .bashrc .bashrc.bak [ New File ] ^G Help ^O Write Out ^W Where Is ^K Cut ^T Execute ^C Location M-U Undo ^X Exit ^R Read File ^\\ Replace ^U Paste ^J Justify ^/ Go To Line M-E Redo ^X 表示组合键 ctrl +x,很多程序都使用。\n ctrl + O 保存。 ctrl + x 退出。  配合文件 .bashrc 后面加入如下内容\numask 002 | 设置掩码，解决共享目录的问题。 export HISTCONTROL=ignoredups | history 忽略历史记录过的相同命令 expoert HISTSIZE=1000 | 命令历史记录数量从默认500设置为1000 alias l.=ls -d .* --color=auto | 显示以点开头的所有目录条目 shell 会话启动的时候才会读取 .bashrc 文件。关闭终端再次打开才会生效。\n也可以强制 bash 重新读取下面的文件：\n$ source .bashrc ","permalink":"https://hzw9527.github.io/posts/linux/env/","summary":"\u003cp\u003eshell 在会话期间维护着成为环境的大量信息\u003c/p\u003e","title":"linux 环境变量"},{"content":"linux 进程\n1 简介 现代系统通常支持多任务处理，意味着此类系统在执行程序之间进行快速切换，从而形成一种同时处理多项任务的错觉。内核利用进程来实现这种效果。\nlinux 通过进程调度等待 CPU 的不同程序。\n本文用到的命令：\n ps: 查看进程。 top: 动态查看进程。 jobs: 查看启动的作业。 fg: 将作业置于前台。 bg: 将作业置于后台。 kill: 向进程发送信号。 killall: 按名称终止进程。 shutdown: 关闭或者重启系统。  2 进程工作方式 linxu 启动时会展开一些自身的操作活动并运行一个名为init 的程序，init 再运行一些位于 /etc 的一些脚本启动所有的系统服务。很多服务是以守护进程的方式启动的。此类 程序在后台运行自己的工作。\n一个程序能够启动其他程序，认为是父进程启动子进程。\nlinux 内核维护着每个进程的相关信息。每个进程都被分配一个进程 ID 也就是 PID。PID 按照顺序递增分配。init 的 PID 始终为 1。内核还记录着分配给每个进程的内存和用来恢复进程运行的就绪信息。\n和文件类似，进程也有 属主，用户ID,有效用户ID。\n3 查看进程 ps 输出于当前终端会话关联的进程信息\n$ ps PID TTY TIME CMD 337452 pts/0 00:00:00 bash 357090 pts/0 00:00:00 ps  pID: 进程ID。 tty：进程的控制终端。 TIME: 进程消耗 CPU 时间的总和。  ps x 查看当前用户的所有进程\n$ ps x PID TTY STAT TIME COMMAND 324874 ? Ss 0:00 /usr/lib/systemd/systemd --user 324877 ? S 0:00 (sd-pam) 327222 ? Ss 0:00 /usr/bin/dbus-daemon --session --address=systemd: --nofork --nopidfile --systemd-activation --syslog-only 337451 ? S 0:00 sshd: going@pts/0,pts/3 337452 pts/0 Ss 0:00 -bash 337526 pts/3 Ss+ 0:00 -bash 357785 pts/0 R+ 0:00 ps x x 选项会使 ps 命令显示所有的进程。不管这些进程是由哪个终端控制的。tty ? 号表示没有控制终端。通过该选项可以查看当前用户的所有进程。\nstat 表示该进程的状态\nR | 运行状态 S | 睡眠状态。正在等待某个事件，例如按键或者网络分组。 D | 不可中断的睡眠状态。该进程正在等待 I/O,例如磁盘设备的 I/O T | 已停止。该进程按照指示停止。 Z | 僵尸进程。 已终止但是未被父进程清理的子进程。 \u0026lt; | 高优先级进程。可以优先分配更多的 CPU。 N | 低优先级进程。高优先级进程服务完毕后才能得到 CPU 事件。 ps -aux 输出所有用户的进程\nps -aux USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 1 0.0 0.2 183996 11468 ? Ss Oct14 2:55 /usr/lib/systemd mysql 1264 0.0 2.7 1406016 104988 ? Ssl Oct14 3:37 /usr/sbin/mariad going 337451 0.0 0.1 156992 6152 ? R 09:04 0:00 sshd: going@pts/ 不带前置连字符将使得命令以“BSD风格”运行。\n USER：用户 ID。当前进程的属主。 %CPU：CPU 占用率。 %MEN：内存占用率。 VSZ: 虚拟内存大小。 RSS: 驻留集大小。进程占用的 RAM 数量。 START: 进程启动时间。超过24小时，使用日期显示。  4 top 动态查看进程命令 top 默认每3秒根据进程活动顺序显示系统进程列表。上部分显示系统总体状态信息，下半部分显示 CPU 活动程序的进程列表。\ntop - 08:41:41 up 22 days, 16:16, 1 user, load average: 0.02, 0.01, 0.00 Tasks: 106 total, 2 running, 104 sleeping, 0 stopped, 0 zombie %Cpu(s): 0.3 us, 0.3 sy, 0.0 ni, 99.0 id, 0.2 wa, 0.2 hi, 0.0 si, 0.0 st MiB Mem : 3736.7 total, 281.7 free, 690.1 used, 2764.8 buff/cache MiB Swap: 0.0 total, 0.0 free, 0.0 used. 2810.8 avail Mem 第一行\ntop | 程序名称 08:41:41 | 当前时间 up 22 days | 上次启动后运行的时间总和 1 users | 1个登录用户 load average | 平均负载，也就是等待运行的进程数量，一次为过去 1min 5min 15min 的平均值，低于1.0表示系统并不繁忙 第二行\nTasks | 统计了进程数量和数量 第二行\n%Cpu(s) | 描述了 CPU 正在运行的活动和特征 0.3 us | CPU 0.3% 的时间被用于用户进程（内核之外的进程） 0.3 sy | CPU 0.3% 的时间被用于用内核进程 0.0 ni | CPU 0.0% 的时间被用于低优先级进程 99.0 id | CPU 99.0% 的时间是空闲的 0.2 wa | CPU 0.2% 的时间用于等待磁盘 I/O 第四行\nMiB Mem | 使用了多少物理内存 第五行\nSwap | 使用了多少交换空间（虚拟内存） 5 进程控制 5.1 进程至于后台,example 是我们写的二进制程序。\n$ ./example \u0026amp; [1] 1067064 启动了一个编号为1的作业，PID 为 1067064。运行 ps 命令可以查看该进程\n$ ps PID TTY TIME CMD 1066817 pts/0 00:00:00 bash 1067064 pts/0 00:00:00 example 1067081 pts/0 00:00:00 ps shell 的作业控制也提供了相关的方法查看作业列表\n$ jobs [1]+ Running ./example \u0026amp; 5.2 进程返回前台 $ jobs [1]+ Running ./example \u0026amp; $ fg %1 ./example fg 加上百分号和作业参数。此时进程返回前台,ctrl + C 可以终止程序。\n5.3 停止进程 有时候我们只是要暂停进程，不是停止进程，这种行为通常是为了将进程从前台返回后台。\nctrl + Z 终止进程\n$ ./example [1]+ Stopped ./example $ bg %1 [1]+ ./example \u0026amp; 6 信号 信号是系统和程序之间的通信途径之一。\nctrl + C 组合键发送 INI 信号。 CTRL + Z 组合键发送 TSTP 信号\n6.1 使用 kill 命令向进程发送信号 kill -signal PID kill 命令的常用信号\n   编号 名称 含义     1 HUP 前台程序接受该信号会终止，后台程序会利用该信号重启并读取配置文件   2 INT 中断信号。和 ctrl + c 差不多   9 KILL 杀死信号，内核会立即终止该进程，进程没有机会善后或者保存已完成的工作   15 TERM terminate 信号，kill 命令的默认信号   18 CONT 继续信号，可在 stop 信号或者 TSTP 信号之后恢复进程。bg 命令和 fg 命令会发送这个信号   19 STOP 暂停进程，和 KILL 进程一样，不向目标进程发送   20 TSTP terminate stop 信号，ctrl + Z 组合键发送的信号，和 stop 信号区别在于 TSTP 信号由进程接收    未指定信号默认使用 TERM 信号\n使用方式\nkill -9 12345 kill -INT 12345 kill -signal 12345 kill -l 列出所有信号\n6.2 关闭系统 关闭系统意味着有序的终止所有进程，还要在断电之前执行重要的内务整理工作（比如同步所有已挂载的文件系统）\n halt poweroff reboot shutdown ","permalink":"https://hzw9527.github.io/posts/linux/ps/","summary":"\u003cp\u003elinux 进程\u003c/p\u003e","title":"linux 进程"},{"content":"熟练掌握 Makefile 语法\n1 makefile 简介 Makefile 文件由三个部分组成，分别是 Makefile 规则、Makefile 语法和 Makefile 命令（这些命令可以是 Linux 命令，也可以是可执行的脚本文件）。\n2 makefile 使用方法 实际项目中一般先编写一个 makefile 文件,指定整个项目的编译规则，然后通过 make 命令来解析该 Makefile 文件，实现项目编译、管理的自动化。\nmake 支持 “makefile”和“Makefile”这两种文件名，建议使用 Makefile,大写开头，一目了然。\nmake 也支持 -f / \u0026ndash;file 指定其他文件名，e.g. make -f golang.mk 或者 make --file golang.mk。\n3 makefile 规则介绍 makefile规则由 目标、依赖和命令组成，用来指定源文件编译的先后顺序。\nMakefile 规则可以自动判断是否需要重新编译某个目标，从而确保目标仅在需要时编译。\n3.1 规则语法 target ...: prerequisites ... command ... ...  target： 可以时目标文件，执行文件，标签。多个目标使用空格分离。可以使用通配符。 prerequisites： 生成该 target 所需要的依赖。多个依赖使用空格分离。 command：表示该 target 要执行的命令。  执行名列钱前，默认会控制台打印该命令，不打印命令前加@。 command可为多条，也可以分行写，每行 command 前要加 tab 键开始。后一条命令依赖前一条命令必须写在同一行，使用分号隔开。 忽略命令出错 command 前加减号 -。 e.g. -@rm hello.o。    target 不存在，或者 prerequisites 中有一个以上的文件比 targets 文件新时，command 命令会重新执行。\n3.2 伪目标 一般需要显示的指定伪目标，通过 .PHONY 指定。\n.PHONY: clean clean: rm hello.o Makefile 不会为伪目标生成任何文件，无法生产它的依赖的关系。\n伪目标总是会执行，所以其依赖总是被决议，以达到同时执行所有依赖项的目的。\n伪目标也可以有依赖。\n.PHONY: all all: lint test build 3.3 清理编译中间文件 项目编译过程中产生一些中间文件。Makefile 一般会有一个 clean 伪目标，用来清理中间产物。\nclean: rm hello.o Makefile 支持3个通配符 *，? 和~ 。\nobjects = *.o print: *.c rm *.c 3.4 order-only 依赖 targets : normal-prerequisites | order-only-prerequisites command ... ... 在上面的规则中，只有第一次构造 targets 时，才会使用 order-only-prerequisites。后面即使 order-only-prerequisites 发生改变，也不会重新构造 targets\n只有 normal-prerequisites 中的文件发生改变时，才会重新构造 targets。\n4 makefile 语法概览 4.1 linux 命令 makefile 支持 linux 命令，默认情况下会输出执行的命令，禁止 make 输出执行的命令\n.PHONY: test test: @echo \u0026#34;hello world\u0026#34; 建议在命令前都加@符号，禁止打印命令本身，保证 Makefile 输出易于阅读的、有用的信息。\n默认情况下，每条命令执行完 make 就会检查其返回码。 如果返回成功（返回码为 0），make 就执行下一条指令；如果返回失败（返回码非 0），make 就会终止当前命令。\n有时候命令出错（比如删除了一个不存在的文件）时，我们并不想终止，这时就可以在命令行前加 - 符号，来让 make 忽略命令的出错，以继续执行下一条命令。\nclean: -rm hello.o 4.2 基本变量 Makefile 支持变量赋值、多行变量和环境变量。Makefile 还内置了一些特殊变量和自动化变量\n声明变量\nGO=go 引用变量\n可以通过$()或者${}方式引用，建议使用 $()\nGO=go build: $(GO) build -v . 变量的四种赋值方式\n = 基本的赋值方法  A = a B = $(A) b A = c B 最后的值为 c b，而不是 a b。也就是说，在用变量给变量赋值时，右边变量的取值，取的是最终的变量值。\n:=直接赋值，赋予当前位置的值  A = a B := $(A) b A = c B 最后的值为 a b。\n?= 表示如果该变量没有被赋值，则赋予等号后的值  PLATFORMS ?= linux_amd64 linux_arm64 +=表示将等号后面的值添加到前面的变量上  MAKEFLAGS += --no-print-directory 多行变量\ndefine 关键字设置多行变量\ndefine 变量名 变量内容 ... endef 变量的内容可以包含函数、命令、文字或是其他变量\ndefine USAGE_OPTIONS Options: DEBUG Whether to generate debug symbols. Default is 0. BINS The binaries to build. Default is all of cmd. ... V Set to 1 enable verbose build. Default is 0. endef 环境变量\n在 Makefile 中，有两种环境变量，Makefile 预定义的环境变量和自定义的环境变量。\n默认情况下，Makefile 中定义的环境变量只在当前 Makefile 有效，如果想向下层传递（Makefile 中调用另一个 Makefile），需要使用 export 关键字来声明。\n自定义的环境变量可以覆盖 Makefile 预定义的环境变量。\n声明了一个环境变量\n... export USAGE_OPTIONS ... Makefile 还支持两种内置的变量：特殊变量和自动化变量。\n特殊变量是 make 提前定义好的。\nMakefile 还支持自动化变量。自动化变量可以提高我们编写 Makefile 的效率和质量。\n自动化变量，会把模式中所定义的一系列的文件自动地挨个取出，一直到所有符合模式的文件都取完为止。\n$是用得最多的。$ 对于构造有关联的文件名是比较有效的。如果目标中没有模式的定义，那么 $* 也就不能被推导出。但是，如果目标文件的后缀是 make 所识别的，那么 $* 就是除了后缀的那一部分。\n例如： 如果目标是 foo.c ，因为.c 是 make 所能识别的后缀名，所以 $* 的值就是 foo。\n4.3 条件语句 判断变量ROOT_PACKAGE是否为空，如果为空，则输出错误信息，不为空则打印变量值\nifeq ($(ROOT_PACKAGE),) $(error the variable ROOT_PACKAGE must be set prior to including golang.mk) else $(info the value of ROOT_PACKAGE is $(ROOT_PACKAGE)) endif 条件语句的语法为：\n# if ... \u0026lt;conditional-directive\u0026gt; \u0026lt;text-if-true\u0026gt; endif # if ... else ... \u0026lt;conditional-directive\u0026gt; \u0026lt;text-if-true\u0026gt; else \u0026lt;text-if-false\u0026gt; endif 有 4 个关键字：ifeq、ifneq、ifdef、ifndef。\n判断相等\nifeq (\u0026lt;arg1\u0026gt;, \u0026lt;arg2\u0026gt;) ifeq \u0026#39;\u0026lt;arg1\u0026gt;\u0026#39; \u0026#39;\u0026lt;arg2\u0026gt;\u0026#39; ifeq \u0026#34;\u0026lt;arg1\u0026gt;\u0026#34; \u0026#34;\u0026lt;arg2\u0026gt;\u0026#34; ifeq \u0026#34;\u0026lt;arg1\u0026gt;\u0026#34; \u0026#39;\u0026lt;arg2\u0026gt;\u0026#39; ifeq \u0026#39;\u0026lt;arg1\u0026gt;\u0026#39; \u0026#34;\u0026lt;arg2\u0026gt;\u0026#34; 判断不等\nifneq (\u0026lt;arg1\u0026gt;, \u0026lt;arg2\u0026gt;) ifneq \u0026#39;\u0026lt;arg1\u0026gt;\u0026#39; \u0026#39;\u0026lt;arg2\u0026gt;\u0026#39; ifneq \u0026#34;\u0026lt;arg1\u0026gt;\u0026#34; \u0026#34;\u0026lt;arg2\u0026gt;\u0026#34; ifneq \u0026#34;\u0026lt;arg1\u0026gt;\u0026#34; \u0026#39;\u0026lt;arg2\u0026gt;\u0026#39; ifneq \u0026#39;\u0026lt;arg1\u0026gt;\u0026#39; \u0026#34;\u0026lt;arg2\u0026gt;\u0026#34; 判断变量是否已定义，如果值不为空，则表达式为真，否则为假\nifdef \u0026lt;variable-name\u0026gt; 判断变量是否未定义，如果值为空，则表达式为真，否则为假\nifndef \u0026lt;variable-name\u0026gt; 4.4 函数 自定义函数\n可以通过 define 关键字来自定义一个函数\ndefine 函数名 函数体 endef 示例：\ndefine Foo @echo \u0026#34;my name is $(0)\u0026#34; @echo \u0026#34;param is $(1)\u0026#34; endef define 本质上是定义一个多行变量，可以在 call 的作用下当作函数来使用，在其他位置使用只能作为多行变量来使用，例如：\nvar := $(call Foo) new := $(Foo) 预定义函数\nmake 编译器也定义了很多函数，这些函数叫作预定义函数\n$(\u0026lt;function\u0026gt; \u0026lt;arguments\u0026gt;) 或者\n${\u0026lt;function\u0026gt; \u0026lt;arguments\u0026gt;} arguments 参数间用逗号分割。函数的参数也可以是变量。\nPLATFORM = linux_amd64 GOOS := $(word 1, $(subst _, ,$(PLATFORM))) 上面的例子用到了两个函数：word 和 subst。word 函数有两个参数，1 和 subst 函数的输出。subst 函数将 PLATFORM 变量值中的 _ 替换成空格（替换后的 PLATFORM 值为 linux amd64）。word 函数取 linux amd64 字符串中的第一个单词。所以最后 GOOS 的值为 linux。\n常用的函数如下：\n5 引入其他 makefile Makefile 要结构化、层次化，这一点可以通过在项目根目录下的 Makefile 中引入其他 Makefile。\n通过关键字 include，把别的 makefile 包含进来。\ninclude scripts/make-rules/common.mk include scripts/make-rules/golang.mk include 也可以包含通配符include scripts/make-rules/*。make 命令会按下面的顺序查找 makefile 文件\n 如果是绝对或相对路径，就直接根据路径 include 进来。 如果 make 执行时，有-I或\u0026ndash;include-dir参数，那么 make 就会在这个参数所指定的目录下去找。 如果目录/include（一般是/usr/local/bin或/usr/include）存在的话，make 也会去找。  如果有文件没有找到，make 会生成一条警告信息，但不会马上出现致命错误，而是继续载入其他的文件。一旦完成 makefile 的读取，make 会再重试这些没有找到或是不能读取的文件。如果还是不行，make 才会出现一条致命错误信息。如果你想让 make 忽略那些无法读取的文件继续执行，可以在 include 前加一个减号-，如-include 。\n","permalink":"https://hzw9527.github.io/posts/makefile/make-core-syntax/","summary":"\u003cp\u003e熟练掌握 Makefile 语法\u003c/p\u003e","title":"Makefile Core Syntax"},{"content":"Go Modules依赖包管理\n1 go modules 简介   Go Modules 是 Go 官方推出的一个 Go 包管理方案。\n  支持版本管理。\n  允许同一个模块多个版本共存。\n  可以校验依赖包的哈希值，确保包的一致性，增强安全性。\n  内置几乎所有的 go 命令，包括 go get、go build 、go install、go run、 go test、go list 等命令。\n  具有 global caching 特性，不同项目的相同模块版本，只会在服务器上缓存一份。\n  go1.14 之后官方建议在生产环境中使用 go modules。go modules 相关的概念可以总结为 \u0026ldquo;6-2-2-1-1\u0026rdquo;\n 六个环境变量：GO111MODULE、GOPROXY、GONOPROXY、GOSUMDB、GONOSUMDB、GOPRIVATE。 两个概念：Go module proxy 和 Go checksum database。 两个主要文件：go.mod 和 go.sum。 一个主要管理命令：go mod。一个 build flag。  2 package 和 模块（module）  go.mod 中定义了模块的名称及其依赖包。每个依赖包都需要指定导入的路径和语义化版本。 模块和包的关系更像是集合和元素的区别，包属于模块，一个模块是零个或者多个包的集合。  go 的包有四种类型：\n go 标准库。 第三方包：比如 github 等其他第三方提供的包。 匿名包：只导入而不使用的包。只想使用导入包产生的副作用，及引用包级别的变量、常量、结构体、接口等， 内部包：项目内部的包，位于项目目录下。  go modules 命令：\n go mod download: 下载 go mod 文件中所有的依赖包。 go mod edit: 编辑 go mod 文件。 go mod graph: 查看现有的依赖结构。 go mod tidy: 添加丢失的模块，并移除无用的模块。默认情况下，Go 不会移除 go.mod 文件中的无用依赖。当依赖包不再使用了，可以使用go mod tidy命令来清除它。 go mod vendor: 将所有的依赖包存到当前目录下得 vendor 目录。 go mod verify: 检查当前模块的依赖是否已经存在本地下载的源代码缓存中，以及检查下载后是否有修改。 go mod why: 为什么需要依赖某模块。  3 下载模块 3.1 代理下载模块 默认情况下，Go 命令从 VCS（Version Control System，版本控制系统）直接下载模块，例如 GitHub、Bitbucket、Bazaar、Mercurial 或者 SVN。\ngo1.13 版本引入新的环境变量 GOPROXY，用于设置 go 模块代理。代理服务器可以指定多个。\nexport GOPROXY=https://proxy.golang.org,https://goproxy.cn,direct 设置了 GOPROXY 后，会优先从代理服务器下载模块。如果下载失败，go 命令会尝试从下一个代理服务器下载。\ndirect 是一个特殊指示符，用来指示 go 回源到模块的源地址（比如 github) 去抓取。当值列表中上一个 Go module proxy 返回 404 或 410，Go 会自动尝试列表中的下一个，遇见 direct 时回源，遇见 EOF 时终止，并抛出类似invalid version: unknown revision\u0026hellip;的错误。\n如果 GOPROXY=off,go 不会尝试从代理服务器下载模块。\n私有仓库设置代理\n有的模块需要从私有仓库拉取，通过代理服务器访问会报错，可以将这些模块添加到环境变量 GONOPROXY 中。建议直接设置 GOPRIVATE 环境变量，它的值将作为 GONOPROXY 和 GONOSUMDB 的默认值。\nGONOPROXY、GONOSUMDB 和 GOPRIVATE 都支持通配符，多个域名用逗号隔开，例如*.example.com,github.com。\n3.2 制定版本号下载 go get 下载模块命令格式为 go get \u0026lt;package[@version]\u0026gt;，如下变所示\ngo get -u 更新 package 到最新版本， go get -u=patch 只更新小版本，例如从 v1.2.4 到 v1.2.5。\n3.3 按最小版本下载 模块 A 依赖 B和C ,模块B 依赖模块 D,模块C依赖，最终整个项目中可能存在重复引用的模块，而且版本不同，如果存在这种情况，通常是选择的较高版本\n比如两个模块(v1.3、v1.4)，最终引用 v1.4, 主要因为\n 因为模块 D 的v1.3和v1.4版本变更都属于次版本号的变更，而在语义化版本的约束下，v1.4必须要向下兼容v1.3，因此我们要选择高版本的v1.4。 模块导入路径的规范。主版本号不同，模块的导入路径就不一样。所以，如果出现不兼容的情况，主版本号会改变，例如从 v1 变为 v2，模块的导入路径也就改变了，因此不会影响 v1 版本。  4 go.mod 4.1 go.mod 介绍 一个示例 go mod 文件\nmodule github.com/marmotedu/iam go 1.14 require ( github.com/AlekSi/pointer v1.1.0 github.com/appleboy/gin-jwt/v2 v2.6.3 github.com/asaskevich/govalidator v0.0.0-20200428143746-21a406dcc535 github.com/gin-gonic/gin v1.6.3 github.com/golangci/golangci-lint v1.30.0 // indirect  github.com/google/uuid v1.0.0 github.com/blang/semver v3.5.0+incompatible golang.org/x/text v0.3.2 ) replace ( github.com/gin-gonic/gin =\u0026gt; /home/colin/gin golang.org/x/text v0.3.2 =\u0026gt; github.com/golang/text v0.3.2 ) exclude ( github.com/google/uuid v1.1.0 ) 4.2 go mod 语句 go mod 文件中包含了四个语句，module、require、replace和 exclude.\n module: 定义当前项目的模块路径。 go: 设置预期的 go 版本，目前只是起标识作用。 require: 设置一个特定的模块版本，格式为 \u0026lt;导入包路径\u0026gt; \u0026lt;版本\u0026gt; [// indirect]。 exclude: 排除一个特定的模块版本，如果知道某个模块的某个版本有问题，可以使用 exclude 将该版本排除掉。 replace: 将一个模块版本替换成另外一个模块版本。格式为$module =\u0026gt; $newmodule ，$newmodule可以是本地磁盘的相对路径，例如github.com/gin-gonic/gin =\u0026gt; ./gin。也可以是本地磁盘的绝对路径，例如github.com/gin-gonic/gin =\u0026gt; /home/lk/gin。还可以是网络路径，例如golang.org/x/text v0.3.2 =\u0026gt; github.com/golang/text v0.3.2。  虽然我们用$newmodule替换了$module，但是在代码中的导入路径仍然为$module。replace 在实际开发中经常用到，下面的场景可能需要用到 replace：\n 需要修改依赖的包进行调试。可以将依赖包另存到一个新的位置，并在 go.mod 中替换这个包。 包无法下载，可以将从其他途径下载的依赖包上传到开发构建机，并在 go.mod 中替换这个包。 项目开发初期，A 项目依赖 B项目的包，b项目的包没有 push 到仓库，可以在 go mod 把依赖包替换为本地的磁盘路径。 在国内访问 golang.org/x 的各个包都需要翻墙，可以在 go.mod 中使用 replace，替换成 GitHub 上对应的库，例如golang.org/x/text v0.3.0 =\u0026gt; github.com/golang/text v0.3.0。  exclude 和 replace 只作用于当前主模块，不影响主模块所依赖的其他模块。\n4.3 go mod版本号  模块具有符合语义化版本格式的 tag，会直接展示 tag 的值，例如 github.com/AlekSi/pointer v1.1.0 除了 v0 和 v1 外，主版本号必须显试地出现在模块路径的尾部，例如 github.com/appleboy/gin-jwt/v2 v2.6.3. 没有 tag 模块，会根据 master 分支上最新的 commit 时间和 哈希值生成一个符合语义化版本的版本号 github.com/asaskevich/govalidator v0.0.0-20200428143746-21a406dcc535 模块名字跟版本不符合规范，例如模块的名字为github.com/blang/semver，但是版本为 v3.5.0（正常应该是github.com/blang/semver/v3），go 会在 go.mod 的版本号后加+incompatible表示 如果 go.mod 中的包是间接依赖，则会添加// indirect注释，  出现// indirect的情况。原则上 go.mod 中出现的都是直接依赖，下面两种情况都会出现间接依赖\n 直接依赖未启用 Go Modules: 模块 A 依赖模块 B，模块 B 依赖 B1 和 B2，但是 B 没有 go.mod 文件，则 B1 和 B2 会记录到 A 的 go.mod 文件中，并在最后加上// indirect。 直接依赖 go.mod 文件中缺失部分依赖：如果模块 A 依赖模块 B，模块 B 依赖 B1 和 B2，B 有 go.mod 文件，但是只有 B1 被记录在 B 的 go.mod 文件中，这时候 B2 会被记录到 A 的 go.mod 文件中，并在最后加上// indirect  4.4 go mod 文件修改方法 go.mod 可以采用下面三种方式修改：\n go 命令在运行时修改 手动编辑 go.mod 文件 执行 go mod 子命令修改  实际使用中，建议使用第三种方式修改。\ngo mod edit -fmt # go.mod 格式化 go mod edit -require=golang.org/x/text@v0.3.3 # 添加一个依赖 go mod edit -droprequire=golang.org/x/text # require的反向操作，移除一个依赖 go mod edit -replace=github.com/gin-gonic/gin=/home/colin/gin # 替换模块版本 go mod edit -dropreplace=github.com/gin-gonic/gin # replace的反向操作 go mod edit -exclude=golang.org/x/text@v0.3.1 # 排除一个特定的模块版本 go mod edit -dropexclude=golang.org/x/text@v0.3.1 # exclude的反向操作 5 go.sum 5.1 go.sum 介绍 go.mod 记录了项目所依赖的包，单单一个 go.mod 文件不能保证包的一致性，有可能缓存在本地的包被修改过，因此引入了 go.sum。\ngo.sum 文件是用来记录每个依赖包的哈希值，构建项目时如果本地的依赖包 hash 值和 go.sum 文件中不一致，会拒绝构建。go.sum 中会记载 go.mod中所有的 依赖包的哈希值，包括直接依赖和间接依赖。\n为了避免已缓存的模块被更改，$GOPATH/pkg/mod下缓存的包是只读的，不允许修改。\n一个 go.sum 文件内容如下\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c h1:qgOY6WgZOaTkIIMiVjBQcw93ERBE4m30iBm00nkL0i8=\rgolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\rrsc.io/quote v1.5.2 h1:w5fcysjrx7yqtD/aO+QwRjYZOKnaM9Uh2b40tElTs3Y=\rrsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=\rrsc.io/sampler v1.3.0 h1:7uVkIFmeBqHfdjD+gZwtXXI+RODJ2Wc4O7MPEh/QiW4=\rrsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA= 每行记录由模块名、版本、哈希算法和哈希值组成, 如 [/go.mod] :。\n从 Go1.11 到 Go1.14 版本，只有一个算法 SHA-256，用 h1 表示。\n正常情况下，每个依赖包会包含两条记录，分别是依赖包所有文件的哈希值和该依赖包 go.mod 的哈希值，例如：\nrsc.io/quote v1.5.2 h1:w5fcysjrx7yqtD/aO+QwRjYZOKnaM9Uh2b40tElTs3Y= rsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0= 如果一个依赖包没有 go.mod 文件，就只记录依赖包所有文件的哈希值，也就是只有第一条记录。 额外记录 go.mod 的哈希值，主要是为了在计算依赖树时不必下载完整的依赖包版本，只根据 go.mod 即可计算依赖树\n5.2 go.sum 文件生成 项目引用一个新的包，通常会执行 go get 命令\n$ go get rsc.io/quote 当执行go get rsc.io/quote命令后，go get命令会先将依赖包下载到$GOPATH/pkg/mod/cache/download，下载的依赖包文件名格式为$version.zip，例如v1.5.2.zip。\n下载完成之后，go get会对该 zip 包做哈希运算，并将结果存在$version.ziphash文件中，例如v1.5.2.ziphash。\n如果在项目根目录下执行go get命令，则go get会同时更新 go.mod 和 go.sum 文件。例如，go.mod 新增一行require rsc.io/quote v1.5.2，go.sum 新增两行：\nrsc.io/quote v1.5.2 h1:w5fcysjrx7yqtD/aO+QwRjYZOKnaM9Uh2b40tElTs3Y=\rrsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0= 5.3 校验 当构建项目时，go 会查看本地所有缓存的依赖包，并计算这些依赖包的哈希值，然后与 go.sum 中记录的哈希值对比，如果哈希值不一致，则校验失败，停止构建。\n校验失败可能因为本地校验失败可能是因为本地指定版本的依赖包被修改过，也可能是 go.sum 中记录的哈希值是错误的。但是 Go 命令倾向于相信依赖包被修改过，因为当我们在 go get 依赖包时，包的哈希值会经过校验和数据库（checksum database）进行校验，校验通过才会被加入到 go.sum 文件中。\n校验和数据库可以通过环境变量GOSUMDB指定，GOSUMDB的值是一个 web 服务器，默认值是sum.golang.org。该服务可以用来查询依赖包指定版本的哈希值，保证拉取到的模块版本数据没有经过篡改。\n如果设置GOSUMDB为off，或者使用go get的时候启用了-insecure参数，Go 就不会去对下载的依赖包做安全校验，这存在一定的安全隐患，所以我建议你开启校验和数据库。值得注意的是，Go checksum database 可以被 Go module proxy 代理，所以当我们设置了GOPROXY后，通常情况下不用再设置GOSUMDB。还要注意的是，go.sum 文件也应该提交到你的 Git 仓库中去。\n6 module 下载流程 目前，所有模块版本数据都缓存在 $GOPATH/pkg/mod 和 $GOPATH/pkg/sum 下，未来有可能移到 $GOCACHE/mod 和 $GOCACHE/sum 下，我认为这可能发生在 GOPATH 被淘汰后。你可以使用 go clean -modcache 清除所有的缓存。\n","permalink":"https://hzw9527.github.io/posts/go/go_modules/","summary":"\u003cp\u003eGo Modules依赖包管理\u003c/p\u003e","title":"Go_modules"},{"content":"linux 权限\n1 简介 linux 系统中多个用户可以同时操作一台计算机。早些时候计算机比较庞大珍贵，必然要支持多用户操作。\n必须避免用户之间相关干扰，不能因为一个用户的操作让整个系统崩溃，用户也不能干涉属于其他用户的文件。\n2 属主、属组以及其他用户 在 unix 安全模型中，用户可以拥有文件和目录。 文件或者目录属于某个用户，该用户(属主)拥有访问权。\n用户反过来可以属于一个或者多个用户组成的组(用户属组)，属组用户可以被文件和目录的属主授予访问权。\n除了为属组授权，属主还可以为所有用户(UNIX 术语叫做世界 world)授权。\n查看用户信息\n[root@VM-16-4-centos ~]# id uid=0(root) gid=0(root) groups=0(root) [going@dev workspace]$ id uid=1001(going) gid=1001(going) groups=1001(going),981(docker)  uid： 创建用户分配的用户 ID gid： 创建用户分配的属组 ID groups: 用户所在的所有属组 ID  属主信息定义在 /etc/password ,属组信息定义在 /etc/group。在创建用户的属主和属组时，这些文件随 /etc/shadow 文件一并改动。后者保存了用户的密码信息。\n尽管很多类 unix 系统将普通用户分配到一个共同属组(同属 users组)，现代 linux 系统中的做法是为每个用户创建一个与用户同名的单成员属组，使得某些类型授权更容易。\n3 读取、写入、执行 文件和目录的访问权限是按照读取、写入、执行来定义的。\n$ ls -l ls.txt -rw-rw-r-- 1 going going 11123 Aug 17 22:10 ls.txt -rw-rw-r-- 这10个字符是文件属性，第一个是文件类型,常见的文件类型如下\nd | 目录 l | 符号链接，对于符号链接，剩下的文件属性始终都是 rwxrwxrwx。符号链接所指向文件的属性才是真正的文件属性 c | 字符设备文件。指的是按字节流处理数据的设备，例如终端或者 /dev/null b | 块设备文件。指的是按块处理数据的设备，例如硬盘或者 DVD 设备 后面剩下的9个字符是文件模式，分别代表文件属主、文件属组、其他用户的读取、写入、执行权限。\n下面的列表表示你给了对应的文件或者目录什么权限，你才能做什么操作，比如目录的 x 权限属性，用户只有对该目录有 x 执行权限，才能进入该目录。\n   权限属性 文件 目录     r 允许打开并读取文件 允许列出目录内容（如果也设置了执行属性）   w 允许写入或者截断文件，但是不允许重命名或者删除文件。文件的删除或者重命名由目录属性决定 允许在目录内创建、删除、重命名文件(如果也设置了执行属性)   x 允许改文件作为程序执行。以脚本语言编写的程序文件必须设置为可读才能被执行 允许进入该目录，例如 cd directory    下面看几个例子：\n -rw-rw----： 可由文件属主和属组读取、写入普通的文件。 drwxrwx---： 目录。属主和属组可以进入该目录并在其中创建、重命名、删除文件。 lrwxrwxrwx: 符号链接。所有符号链接的权限都是 \u0026ldquo;虚设\u0026rdquo;(dummy) 的。真正的权限是由符号链接指向的文件决定的。  4 chmod 改变文件模式 chmod 命令可以修改文件或者目录的模式。只有文件属主或者超级用户才可以修改。\nchmod 命令支持两种不同的模式表示方式。\n 八进制表示法 符号表示法  4.1 八进制表示法 以属主权限为例,总共有三个字符 rwx，每个字符有两种可能，第一个字符可能为 r 或者 -,第二个字符可能为 w 或者 - 第三个字符为 x 或者 - 排列组合 2 = 8 总共有 8 中组合 8进制也就是 0-7\n以二进制形式和八进制形式表示的文件模式\n   八进制模式 二进制模式 文件模式     0 000 ---   1 001 --x   2 010 -w-   3 011 -wx   4 100 r--   5 101 r-x   6 110 rw-   7 111 rwx    如何判断 3 是什么权限 ?\n3 的二进制是 011 也就是 第二位是 1 （也就是 w） 和第三位 是 1(x) ，1 表示当前位置对应的权限，0 就是 -。\n修改权限可以这么操作\n[going@dev vim-study2]$ ls -l ls.txt -rw-rw-r-- 1 going going 11123 Aug 17 22:10 ls.txt [going@dev vim-study2]$ chmod 776 ls.txt [going@dev vim-study2]$ ls -l ls.txt -rwxrwxrw- 1 going going 11123 Aug 17 22:10 ls.txt 776 中 7 表示 111， 也就是 rwx; 6 表示 110 也就是 rw-\n4.2 设置默认权限 umask 可以设置文件创建时的默认权限。该命令使用八进制描述了从文件模式属性中去除权限的位掩码。\n这句话是什么意思呢？ 默认情况下，对于目录，用户所能拥有的最大权限是777；对于文件，用户所能拥有的最大权限是目录的最大权限去掉执行权限，即 666 。因为x执行权限对于目录是必须的，没有执行权限就无法进入目录，而对于文件则不必默认赋予x执行权限。\n对于文件 对于 root 用户，系统默认的 umask 值是 0022；对于普通用户，系统默认的 umask 值是 0002。 umask值一共有4组数字，其中第1组数字用于定义特殊权限，我们一般不予考虑，与一般权限有关的是后3组数字。\n上面的意思就是说 对于 root 用户默认的 umask 值是 0022 ，那么使用 root 用户下创建目录时赋予的权限就是 777 - 022 = 755,也就是 rwxr-xr-x。 创建文件时的权限是 666 - 022 = 644， 也就是 rw-r--r--。\n对于普通用户默认的 umask 值是 0002 ，那么使用普通用户创建目录时赋予权限的就是 777- 002 = 775,也就是 rwrwxr-x。 创建文件时权限是 666- 002 = 775，也就是 rwxrwxr-x\n如果 umask 是 0003 文件权限是 777-003 = 774 ,因为文件默认是没有执行权限的，umask 的值是需要删除的权限，对于三位的二进制数字来说，只可能是 2或者4，也就是对于文件来说，0000 后面的三位数字只可能为偶数，这里设置为奇数可以认为是加上了已经去掉了执行权限，\n所以对于文件来说，0003 和 0002 是一样的。\n普通用户创建目录和文件\n[going@dev vim-study2]$ umask 0002 [going@dev vim-study2]$ \u0026gt; a.txt [going@dev vim-study2]$ ls -l a.txt -rw-rw-r-- 1 going going 0 Sep 8 23:23 a.txt [going@dev vim-study2]$ mkdir abc [going@dev vim-study2]$ ls -dl abc drwxrwxr-x 2 going going 4096 Sep 8 23:21 abc 在这里默认的 umask 值是 0002，创建文件 a.txt 权限 就是 664. 文件属性也就是 -rwxrwxr-x。\n目录的权限就是 777 - 002 = 775 文件属性就是也就是 drwxrwxr-x。\n目录权限和文件权限示例\n下面的例子验证了对于文件来说 0002 和 0003 是一样的设置，都是去掉了写权限，执行权限都是默认删除的。\n0003 可以认为对于其他用户需要删除执行权限和写权限，他们加起来才等于 3，但是执行权限默认是删除的，所以这里等同于 0002。\n[going@dev vim-study2]$ umask 0002 [going@dev vim-study2]$ \u0026gt; a.txt [going@dev vim-study2]$ ls -l a.txt -rw-rw-r-- 1 going going 0 Sep 8 23:27 a.txt [going@dev vim-study2]$ mkdir 0002 [going@dev vim-study2]$ ls -ld 0002 drwxrwxr-x 2 going going 4096 Sep 8 23:30 0002 [going@dev vim-study2]$ umask 0003 [going@dev vim-study2]$ \u0026gt; b.txt [going@dev vim-study2]$ ls -l b.txt -rw-rw-r-- 1 going going 0 Sep 8 23:28 b.txt [going@dev vim-study2]$ mkdir 0003 [going@dev vim-study2]$ ls -ld 0003 drwxrwxr-- 2 going going 4096 Sep 8 23:29 0003 5 修改密码 拥有超级用户权限或者是当前需要修改密码的用户\n当前用户修改密码\n$ passwd 如果你拥有 root 权限，可以修改其他用户的密码，下面是修改 going 用户的密码\n$ passwd going passwd 会强制使用强密码。太短的密码、与旧密码过于相似的密码，字典中的单词，以及太容易被猜到的密码都会被拒绝使用。\n","permalink":"https://hzw9527.github.io/posts/linux/permission/","summary":"\u003cp\u003elinux 权限\u003c/p\u003e","title":"linux 权限"},{"content":"命令行的目的就是用最少的操作完成最多的工作。\n1 命令行光标移动 ctrl + A | 光标移动到行首 ctrl + E | 光标移动到行尾 ctrl + F | 光标向前移动一个字符，等同于右方向键 ctrl + B | 光标向后移动一个字符，等同于左方向键 alt + F | 光标向前移动一个单词，等同于右方向键 alt + B | 光标向后移动一个单词，等同于左方向键 ctrl + L | 清楚屏幕，等同于 clear 键 2 命令行修改文本 ctrl + D | 删除光标处字符 ctrl + T | 光标处字符与在其之前的一个字符对调 alt + T | 光标处单词与在其之前的一个单词对调 alt + L | 光标到单词结尾的字符转为小写 alt + U | 光标到单词结尾的字符转为大写 3 命令行剪切 readline 文档中使用 killing 和 yanking 指代复制和粘贴。\nctrl + K | 剪切光标处到行尾的文本 ctrl + U | 剪切光标处到行首的文本 alt + D | 剪切光标处到当前单词结尾的文本 alt + backspace | 剪切光标处到当前单词开头的文本，如果光标已经位于开头，剪切上一个单词 ctrl + y | 将 kill-ring 缓冲区的内容文本粘贴到光标处 4 补全功能 tab | 单个匹配文件的时候可以直接补全 两次tab | 显示所有匹配的文件 5 命令行历史记录 一般情况下 bash 显示 500 个命令历史，大多数 linux 发行版会将这个值改为 1000。\nhistory | less history | grep ls 历史扩展\n$ history | grep ls 416 2022-09-05 22:48:29 ls /usr/bin 前面的 416 是历史记录中该命令的编号，可以使用历史扩展 !416 重新执行这个命令。\nbash 会将 !416 重新扩展为历史记录 416 行中的内容。\n5.1 搜素历史命令 ctrl + R 之后，可以搜索历史命令，首先匹配最近使用的命令，可以继续按 ctrl + R 向上继续搜索下一条匹配的历史记录，\n找到结果后也可以使用 ctrl + J 会复制当前找到的命令，然后粘贴到命令行。\n5.2 操作历史命令常用快捷键 上方向键 | 移动到上一条历史记录 ","permalink":"https://hzw9527.github.io/posts/linux/history/","summary":"\u003cp\u003e命令行的目的就是用最少的操作完成最多的工作。\u003c/p\u003e","title":"高级键盘技巧"},{"content":"goland 快捷键\n1 文件位置 光标定位在打开的文件上，显示该文件所在路径。\n2 修复代码 代码黄色下划线, 在一些需要补全的操作中可以使用 alt + enter操作。\n3 结构体标签 json转为结构体\n 1 复制任意一段 json 到 IDE 中会自动弹出 从 json 生成 go 类型，点击确认， 2 ctrl + shift + T 可以提取结构。 3 如果没有该提示可以在IDE中任意函数外部使用 alt + enter,按照提示操作即可。  4 函数多参数长行换行 函数参数变为同一行\n如果一个函数有很多个参数，很多个参数都放在不同的行上，光标放在函数参数括号里面，使用 alt + enter 选择将实参放在同一行上。\n5 if err != nil 自动生成技巧 下面的函数返回 (string,error)\nfunc get() (error,string) { fmt.Println(1) } 可以在调用 get 函数的时候后面加上 .,选择具体的处理方式。\n1 .var 只生成变量,没有主动判断 err\nerr, s := get() 2 .rr 检查错误\nif err, _ := get(); err != nil { return } 3 .varcheckError 生成新的变量，并且多行检查错误\nerr, s := get() if err != nil { return } 6 结构体相关 快速为结构体字段生成 setter 和 getter 函数 | 光标位于函数结构体名称,alt + enter 选择生成 getter 和 setter, 选择字段对话框 按住 shift 选择所有字段 定义结构体后实现接口 | 光标定位于结构体名称上 ctrl + i,输入要实现的接口名称 结构体所有字段加json | alt + enter 向标记中添加键 7 注释相关 alt + enter | 光标位于函数名称上面使用 alt + enter 快速添加注释,或者修改函数名,或者设置函数导出 ctrl + space | 注释里面快读提示添加结构体或者接口名称 8 函数返回多个参数输入 函数返回两个参数 (string,error)，可以直接输入 string,error ，在输入 string, 的时候括号自动添加\n","permalink":"https://hzw9527.github.io/posts/goland/code2/","summary":"\u003cp\u003egoland 快捷键\u003c/p\u003e","title":"goland quick code"},{"content":"goland 插件\n1 常用插件 codeGlance | 右侧代码缩略图 Chinese Language Pack | IDE汉化 translation | 翻译插件 Key Promoter X | 帮你熟悉快捷键 ideavim | vim 插件 2 具体插件使用 2.1 translation 翻译快捷键\nctrl + shift + y | 翻译 ctrl + shift + X | 翻译替换 ","permalink":"https://hzw9527.github.io/posts/goland/plugin/","summary":"\u003cp\u003egoland 插件\u003c/p\u003e","title":"goland Plugin"},{"content":"goland 快捷键\n1 常用快捷键 alt + 1 | 打开关闭项目窗口, ctrl+ G | 定位到指定行 ctrl + shift + F10 | 运行项目 alt + 5 | 关闭调试 ctrl + alt + l | 格式化代码 ctrl + shift + U | 代码大小写切换 alt + shift + enter | 结构体字段变为可导出 ctrl + space | 补全代码,需要英文输入法,输入部分代码会检索更准确,enter确认 ctrl + shift + space | 补全代分码,提示仅包含当前上下文,需要英文输入法,输入部代码会检索更准确,enter确认,上下文的提示更好一些 alt + enter | 函数变为可导出,alt + enter 是常用的一种意图操作 ctrl + U | 找到该实现对应定义的接口 ctrl + shift + A | 打开操作栏,可以搜索各种操作比如重命名,自动换行等操作,神器 ctrl + B | 注释中包含函数名可以使用该快捷键跳转到函数定义位置 F2 | 导航到IDE检测的问题 ctrl + w | 增大选区 ctrl + shift + W | 缩小选区 ctrl + alt + M | 将选中的代码变短提取出来作为一个单独函数 ctrl + F4 | 关闭当前代码编辑窗口 shift + F1 | 光标定位你想查询的包,打开官方关于该包的介绍 # 数据库相关 ctrl + F5 | 刷新数据库的数据 # 变量相关 shift + F6 | 重命名变量 ctrl + alt + v | 将一串表达式提取为一个变量 ctrl + alt + n | 和 ctrl + alt + v 命令相反,一处冗余变量 2 git 相关快捷键 alt + 9 | 打开git历史提交记录 alt + m | 修正提交类似于 git commit --amend 3 goland 终端 vim 进入正常模式 终端vim ESC不能进入正常模式,可以使用 ctrl + c 进入正常模式 ","permalink":"https://hzw9527.github.io/posts/goland/hotkey/","summary":"\u003cp\u003egoland 快捷键\u003c/p\u003e","title":"goland 快捷键"},{"content":"vim 对重复操作进行优化，会记录我们最近的操作。一次按键就能重复上次的修改。\n1 . 命令 . 命令可以重复上次的修改。\n到底什么是修改呢？一次修改可以是字符或者整行，甚至整个文件。\nvim 中我们自己可以控制撤销的粒度，从进入插入模式开始，直到返回普通模式为止，在此期间输入或者删除的内容都被当成一次修改。\n1.1 x dd \u0026gt;G 命令  x: 删除当前光标所在字符。 dd: 删除当前行。 \u0026gt;G：增加当前行到文件末尾处的缩进层级。 j: 移动到一下一行  上面三个命令都是在普通模式下使用\n1.2 每行末尾添加一个分号 操作\n $: 光标移动到当前末尾字符。 a: 当前字符后面插入。 gg: 光标定位到文件的开头（第一行是空的也会定位到第一行，不是文本的开头）， A： 当前行末尾插入  具体流程：\n (1) 普通模式下按 gg 光标定位在首行； (2) $ 光标移动到当前行末尾字符 (3) a 在当前光标后插入内容 (4) 输入 ; (5) 按下 ESC键。 (6) J$. 重复操作  . 只记录进入插入模式开始到插入模式结束的操作，也就是从 a 开始到 ESC 中间的修改。\n$a 意思在于先将光标移动到当前行的末尾字符，然后再光标后插入，这个操作可以合并为一步操作 A，因此如果使用 A 代替第一部的 $a,完成的过程如下\nA # 移动到当前行末尾并进入插入模式 ; # 输入 ; ESC # 进入普通模式，因此 vim 将 A ; 这两部操作当做一个修改 . 操作就可以重复这次修改。 1.3 每个 + 前后各添加一个空格(替换操作) 操作\n f+: 光标移动到当前行下一个 + 号所在的位置。 ;: 分号会重复上一次 f查找命令。 s: 删除当前字符并进入插入模式。 i: 进入插入模式，内容在光标之前。  思路 如果将替换操作（删除当前字符输入新的内容）可以当做一次修改，就可以用 . 操作重复执行，只需要每次找到 + 所在的位置，然后执行一次重复操作即可。\n因此就需要将替换操作当成一次修改：\nf+ # 光标移动当前行下一个 + 所在的位置，用于当前行查找字符 s 输入空格+空格 ESC # 删除当前光标所在的字符，并进入插入模式，输入内容 ，ESC 退出插入模式。 ; # 重复执行 f+  . # 执行上面的替换操作 ;. ;. ","permalink":"https://hzw9527.github.io/posts/vim/vim%E5%91%BD%E4%BB%A4%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E6%96%B9%E5%BC%8F/","summary":"\u003cp\u003evim 对重复操作进行优化，会记录我们最近的操作。一次按键就能重复上次的修改。\u003c/p\u003e","title":"Vim命令解决问题的方式"},{"content":"I/O重定向\n1 标准输入，标准输出及标准错误 系统产生的结果分为两类：\n 程序本身运行产生的数据。 程序的状态和错误信息。  在万物皆文件的 linux 中，程序运行结果发送到名为 stdout (standard output) 的标准输出特殊文件,状态消息发送到名为 stdeer (standard error) 的特殊文件。默认情况下标准输出和标准错误和显示器屏幕相关联，不会保存为文件。\n一般来说输出显示在屏幕，输入来自键盘。i/o 重定向允许修改输出结果的去处和输入的来源。\n2 标准输出重定向 I/O 重定向可以重新定义标准输出的去处。标准输出重定向到其他文件而不是屏幕可以使用重定向操作符 \u0026gt;,后面加上文件名。\n$ ls -l \u0026gt; ls.output.log $ ls -l /usr/bin \u0026gt; ls.output.log 将输出的结果重定向输出到文件。\n \u0026gt; 操作符: 重写目标文件。  命令发生错误\n$ ls -l /bin/usr \u0026gt; ls.output.log ls: cannot access \u0026#39;/bin/usr\u0026#39;: No such file or directory $ ls -l -rw-rw-r-- 1 going going 0 Aug 9 23:21 ls.output.log /bin/usr 目录不存在，linux 默认会将错误信息发送到标准错误，我们只重定向了标准输出，没有重定向标准错误。错误信息默认输出都在屏幕上，而不是 ls.output.log 。\nls.output.log 文件是空的因为 重定向操作符 \u0026gt; 会重写目标文件，准备重写的时候出现了错误，出现错误停止写入操作，最终导致改文件内容被截断。\n基于上面这个特性，可以采用下面方式，只需要使用不加任何命令的重定向操作符，创建一个新的文件或者截断某个文件(清空文件内容)。\n$ \u0026gt; ls.out.log 重定向标准输出追加到文件尾部，而不是覆盖，可以采用如下方式\n$ ls -l \u0026gt;\u0026gt; ls.out.log 3 标准错误重定向 标准错误重定向没有专门的重定向操作符。要想重定向标准错误必须引用文件描述符。程序可以在任意经过编号的文件流上生成输出结果。\n虽然我们将前3个文件流称为标准输入，标准输出及标准错误，但是在 shell 内部分别用文件描述符 0、1、2 引用他们。shell 提供了描述符编号来重定向文件的写法。标准错误对应的文件描述符为2，可以用下列写法来重定向标准错误。\n$ ls -l /bin/usr 2\u0026gt; ls.error.log 文件描述符 2 紧靠在重定向操作符 \u0026gt; 前面，将标准错误重定向到 ls.error.log。\n4 标准错误和标准输入输出到同一文件 如果你想标准错误和标准输入输出到同一文件，必须要重定向标准输出和标准错误。\n$ ls -l /bin/usr \u0026gt; ls.out.log 2\u0026gt;\u0026amp;1 上面的命令指定两次重定向，标准输出重定向到 ls.out.log,然后使用 2\u0026gt;\u0026amp;1 将文件描述符 2(标准错误) 重定向到文件描述符 1(标准输出)。\n新版本的 bash 提供了另外一种方式:\n$ ls -l /bin/usr \u0026amp;\u0026gt; ls.out.log \u0026amp;\u0026gt; 符号可以将标准输出和标准错误重定向到同一个文件中。\n如果你想标准输出和标准错误追加到单个文件中可以这样做。\n$ ls -l /bin/usr \u0026amp;\u0026gt;\u0026gt; ls.out.log 5 丢弃输出结果 有时候你并不需要命令的输出结果，希望将其丢弃掉。\n系统提供了一种解决办法： 将输出结果重定向到名为 /dev/null 的特殊文件。该文件是一个系统设备，通常称作位桶(bit bucket)，它的作用是能够接受输入而不做任何处理。 下面命令是可以丢弃产生的错误消息：\n$ ls -l /bini/usr 2\u0026gt; /dev/null 6 标准输入重定向 6.1 cat 拼接文件 cat命令可以读取一个或者多个文件内容并将内容复制到标准输出。\ncat 可以不分页显示文件内容，所以通常用于显示内容比较短的文件。因为可以一次读取多个文件，可以用于将多个文件内容拼接在一起。\n假如我们下载了一个电影，这个电影分为几个文件 movie.mpeg.001, movie.mpeg.002\u0026hellip; movie.mpeg.099，这种场景下，我们可以使用 cat 将所有文件内容拼接在一起组合还原。\n$ cat movie.mpeg.o* \u0026gt; movie.mpeg 通配符会按照顺序扩展，cat 会有序的将文件进行拼接。\n6.2 利用 cat 创建短文本文件 上面我们说过 cat 是读取一个或者多个文件，如果没有指定文件会怎么样？\n$ cat 这种情况下，如果没有为 cat 指定任何参数，它就从标准输入中读取。又因为标准输入默认和键盘关联,所以 cat 一直在等待我们从键盘输入。\n$ cat 123 123 在缺少文件名参数的情况下，cat 默认会将标准输入复制到标准输出，所以看到了重复显示的文本行。ctrl-D 组合键告诉 cat 命令已经到达标准输入的末尾。\n利用这种行为可以创建文本较少的文件。\n$ cat \u0026gt; ls.out.log hello [going@dev shell-study]$ cat ls.out.log hello 输入 hello,然后 enter , 接着 ctrl -D 。\n总之，cat 可以从键盘接受标准输入。\n当然文件也可以作为标准输入。\n$ cat \u0026lt; ls.out.log hello 7 管道 shell 的管道利用了命令能够从标准输入读取数据并将数据发送到标准输出的能力。通过管道可以将一个命令的标准输出传给另一个命令的标准输入。\ncommand1 | command2 less 就是一个可以使用标准输入的命令：\n$ ls -l /usr/bin | less ls -l /usr/bin 的标准输出作为 less 的标准输入，less 可以使用这个标准输入。对于任何能产生标准输出的命令，都可以用这个方式检查其输出结果。\n管道可以用来执行复杂的数据操作。我们也可以把多个命令组合在一起形成管道。这种方式中用到的命令通常被称为过滤器。\n7.1 排序列表 $ ls /bin /usr/bin | sort | less 上面的命令 ls 的输出结果包含了两个输出结果，分别对应两个目录，默认的输出结果会分别显示两个目录的输出结果，管道中加入 sort 就可以修改命令的输出结果，生成单个有序列表。\n重定向的操作符是将命令和文件连接在一起，管道操作符将一个命令的输出结果与另一个命令的输出结果连接在一起。\n7.2 uniq 命令 uniq 意思是独特的。uniq命令可以从标准输入或者单个文件名参数中获取有序的数据列表。默认删除所有的重复行。\n$ ls /bin /usr/bin | sort | less /bin 和 /usr/bin 目录可能存在同名的应用程序，上面命令的输出结果可能会有重复行，去掉重复行。\n$ ls /bin /usr/bin | sort | uniq | less 这个命令可以删除所有的重复行。\n如果你想查看输出结果有哪些重复行，可以这么做\n$ ls /bin /usr/bin | sort | uniq -d | less 7.3 输出与模式匹配的行 grep 命令可用于在文件中查找文本，功能十分强大。grep 能够匹配非常复杂的模式。\n下面的命令可以从程序列表中找到名称中包含单词 zip 的所有文件。\n$ ls /bin /usr/bin | sort | uniq -d | grep zip bunzip2 bzip2 bzip2recover funzip gpg-zip gunzip grep 选项：\n -i : grep 搜索时忽略字母大小写 -v : grep 只输出不匹配指定模式的行。  7.4 head/tail - 输出文件的开头/结尾部分 有时候你想要的不是命令的全部输出结果,只是前几行或者后几行。head 命令和 tail 默认能够输出文件的前10行和最后10行，当前行数你也可以通过 -n 调整\n查看文件的前 5 行\n$ head -n 5 Makefile 查看文件的最后 5 行\n$ tail -n 5 Makefile 上面两个命令都可以用于管道之中\n$ ls /usr/bin | tail -n 5 tail 命令还有一个功能就是可以实时监测文件的变化，通常用于同步观察日志被写入的过程\n$ tail -f log.out 通过 -f 选项，tail 命令会持续观察该文件。ctrl-c 组合键可以终止。\n7.5 读取标准输入并将输出结果写入标准输出和文件 tee 命令从标准输入读取内容然后将其复制到标准输出（允许数据沿着管道继续流动）和其他文件中。\n$ ls /usr/bin | tee ls.txt | grep zip bunzip2 bzip2 bzip2recover funzip gpg-zip gunzip gzip unzip 在管道之前加入 tee 命令，将整个目录列表保存在 ls.txt，然后复制内容继续流动，输出 grep 模式匹配结果。\n","permalink":"https://hzw9527.github.io/posts/linux/grep/","summary":"\u003cp\u003eI/O重定向\u003c/p\u003e","title":"Grep"},{"content":"和命令打交道\n1 什么是命令 下面四种情况之一都属于命令\n 二进制可执行程序 shell 内建命令。比如 cd ,ls shell 函数。 别名。在其他命令的基础上定义的别名  2 识别命令 2.1 type type 属于 shell 内建命令。通常查看属于哪种类型或者判断某个 str 是不是命令。\n$ type cmd 几个例子\n$ type ls ls is aliased to `ls --color=auto\u0026#39; $ type go go is hashed (/home/going/go/go1.17.2/bin/go) 上面的 ls 看出 ls 命令实际上默认执行了 ls --color=auto ，所以输出结果是彩色的\n2.2 which 显示可执行文件的位置，不能用于内建命令或者实际可执行文件的别名。\n$ which go ~/go/go1.17.2/bin/go 2.3 help -显示 shell 内建命令的帮助信息 $ help cd 2.4 \u0026ndash;help 很多命令也支持 \u0026ndash;help,有些命令可能不支持，可以尝试一下。\n$ go --help 3 使用 alias 创建自己的命令 3.1 一行执行多个命令 使用分号可以一次性执行多个命令\n$ cd /tmp; ls ;cd - 3.2 创建自己的命令 可以使用 alias 创建一个新的命令代替上面的命令序列。比如创建 looktmp。 先检查命令 looktmp 是否被使用\n$ type looktmp bash: type: looktmp: not found [going@dev workspace]$ 创建 looktmp 命令\n$ type looktmp bash: type: looktmp: not found 表明 looktmp 还没有被占用\n$ alias looktmp=\u0026#39;cd /tmp; ls ; cd -\u0026#39; $ looktmp 查看别名\n$ type looktmp looktmp is aliased to `cd /tmp; ls ; cd -\u0026#39; 删除别名\n$ unalias looktmp 查看系统定义所有的别名\n$ alias alias cp=\u0026#39;cp -i\u0026#39; alias egrep=\u0026#39;egrep --color=auto\u0026#39; alias fgrep=\u0026#39;fgrep --color=auto\u0026#39; alias grep=\u0026#39;grep --color=auto\u0026#39; ... shell 回话结束时命令行创建的别名都会消失。\n","permalink":"https://hzw9527.github.io/posts/linux/alias/","summary":"\u003cp\u003e和命令打交道\u003c/p\u003e","title":"Alias"},{"content":"操作文件和目录。\n1 操作文件优点 复杂的任务命令行操作比较简单以及其强大的功能和灵活性。\n2 通配符 因为 shell 需要用到大量的文件名，所以提供了一种特殊的字符，帮助快速指定一组文件名。\n任意能接受文件名作为参数的命令都可以使用通配符。\n各种通配符及其含义:\n   通配符 含义     * 匹配任意多个字符   ？ 匹配任意单个字符   [characters] 匹配属于字符集合 characters 中的任意单个字符   [!characters] 匹配不属于字符集合 characters 中的任意单个字符   [[:class:]] 匹配属于字符类 class 中的任意单个字符    常用的字符类：\n   字符类 含义     [:alnum:] 匹配任意单个字母数字 (alphanumeric) 字符   [:alpha:] 匹配任意单个字母   [:digit:] 匹配任意单个数字   [:lower:] 匹配任意单个小写字母   [:upper:] 匹配任意单个大写字母    通配符示例\n   模式 匹配     * 所有文件（不能包括以点好开头的隐藏文件）   g* 以 g 开头的任意文件   b*.txt 以b开头，扩展名为 txt 的文件   Data??? 以 Data 开头并紧接 3个字符的文件   [abc]* 以 a,b,c 中任意字符开头的文件   BACKUP.[0-9][0-9][0-9] 以 BACKUP. 开头并紧接三个数字的文件   [[:upper]]* 以单个大写字母开头的文件   [![:digit:]]* 不以数字开头的文件   *[[:lower:]123] 以小写字母或1,2,3 中任意数字结尾的文件    3 创建目录 $ mkdir directory... 本文档中 ... 出现 3 个点号表示后面的参数可以重复出现。\n$ mkdir dir1 dir2 dir3 4 复制文件和目录 cp item1 item2 | 将单个文件或者目录 `item1` 复制到文件或者目录 `item2` cp item... directory | 将多个文件或者目录复制到 `directory` 4.1 cp 选项 -a，--archive | 复制文件和目录及其包括所有权与权限在内的所有属性。通常副本采用的是执行复制操作用户的默认属性 -i，--interactive | 覆盖已有文件之前，提示用户确认，未指定该选项，不会发出警告，默认悄无声息覆盖 -r，--recursive | 递归复制目录及其内容，复制目录时用到该选项（或者 -a） -u，--update | 将文件从一个目录复制到目标目录时，只复制目标目录中不存在或者比目标目录中现有文件更新的文件 -v，--verbose | 复制时显示相关信息 4.2 命令示例 cp file1 file2 | file1 复制为 file2,如果 file2存在，file1内容覆盖file2,不存在创建文件 file2 cp -i file1 file2 | 和上一个命令一样覆盖之前提示用户 cp file1 file2 dir1 | file1 和 file2 复制到 dir1,dir 必须事先存在 cp dir1/* dir2\t| 目录 dir1 中所有文件复制到目录dir2,目录 dir2 必须事先存在 cp -r dir1 dir2 | 目录 dir1 的内容复制到 dir2，如果目录 dir2 不存在，则先创建 dir2目录，再复制 dir1 的内容到 dir2中，只复制 dir1 的内容。如果目录 dir2 已经存在，目录 dir1 及其内容会被复制到目录 dir2 5 mv 移动和重命名文件 mv 文件移动和重命名。不管哪种操作，原文件都不再存在。\n$ mv item1 item2 # 文件或者目录 item1 移动或者重命名为 item2 $ mv item... directory # 将一个或者多个 item 从一个目录移动到另一个目录 5.1 mv 选项 -i，--interactive | 覆盖已有文件之前，提示用户确认，未指定该选项，不会发出警告，默认悄无声息覆盖 -u，--update | 将文件从一个目录复制到目标目录时，只复制目标目录中不存在或者比目标目录中现有文件更新的文件 -v，--verbose | 进行移动时显示相关信息 5.2 命令示例 mv file1 file2 | 文件 file1 移动到 file2,如果 file2 存在，使用 file1 的内容将其覆盖，不存在则创建 file2,两种情况 file1 都不再存在 mv -i file1 file2 | 上一个命令确认 mv file1 file2 dir1 | file1 和 file2 移动到 dir1,dir 必须事先存在 mv dir1 dir2 | dir2 不存在，dir1 重命名为 dir2。dir2 已经存在,dir1及其内容移动到目录 dir2 6 删除文件和目录 $ rm item... # 删除文件和目录 item 可以时多个文件或者目录  rm 命令相当危险，删除之前最好 ls 一下需要删除的目录，然后 ls 换成 rm  删除。  6.1 选项 -i，--interactive | 覆盖已有文件之前，提示用户确认，未指定该选项，不会发出警告，默认悄无声息覆盖 -r，--recursive | 递归删除目录。如果删除的目录中还有子目录，也会一并删除。删除目录必须加 -r -f，--force | 忽略不存在的文件，会屏蔽掉 -i 选项提示信息 -v，--verbose | 进行删除时显示相关信息 6.2 示例 rm file1 | 悄无声息的删除文件 file1 rm -i file1 | 上一个命令需要确认 rm -r file1 dir1 | 删除文件file1 和目录 dir1 及其内容 7 硬链接和符号链接 7.1 硬链接  文件与链接必须在一个磁盘分区，硬链接不能跨物理设备。 硬链接不能引用目录 删除硬链接不能删除文件内容本身。  创建硬链接\nln file link # file 是原文件 如何看出硬链接指向一个文件\n创建一个硬链接\n$ ls -l total 4 -rwxrwxr-x 1 going going 156 Aug 1 10:17 dirname.sh $ ln dirname.sh dirname # 为 dirname.sh 创建一个硬链接 $ ls -l total 8 -rwxrwxr-x 2 going going 156 Aug 1 10:17 dirname -rwxrwxr-x 2 going going 156 Aug 1 10:17 dirname.sh 这里的1 和 2 是文件的硬链接数量。\n文件由包含问件的数据部分和包含文件名的名称部分组成。创建硬链接时实际创建的是硬链接的名称部分，和原文件一样都指向相同的数据部分。\n系统为 i 节点分配了一系列的磁盘块，然后将 i 节点与名称部分关联在一起。因此每个硬链接都指向包含文件内容的特定的 i 节点。\n$ ls -li total 8 1312363 -rwxrwxr-x 2 going going 156 Aug 1 10:17 dirname 1312363 -rwxrwxr-x 2 going going 156 Aug 1 10:17 dirname.sh 第一个字段就是 i 节点，1312363 相同表示是同一个文件。\n7.2 符号链接  符号链接是为了克服硬链接的限制出现的。工作原理是创建一种特殊类型的文件，内含一段指向被引用文件或者目录的文本指针。 符号链接指向的文件和符号链接本身没有任何的区别，向符号链接写入内容最终写入的是被引用的文件。 删除软链接不能删除文件内容本身。 如果文件先于符号链接删除，那么符号链接仍旧存在，指向不再有效。也就是无效链接 ls 命令会显示为红色。  语法\nln -s item link # item 可以是文件或者目录，表示原文件 为 dirname 文件创建一个符号链接\n$ ln -s dirname ds 查看 ls\n$ ls -l total 4 -rwxrwxr-x 1 going going 156 Aug 1 10:17 dirname lrwxrwxrwx 1 root root 7 Aug 3 22:51 ds -\u0026gt; dirname  lrwx: l 表示这是一个指向 dirname 的链接 1 : 硬链接数量 7: 表示字符串 dirname 的长度  绝大多数文件操作操作的目标是链接指向的文件,而非链接本身, rm 除外，删除的是链接本身，而不是链接目标。\n","permalink":"https://hzw9527.github.io/posts/linux/file/","summary":"\u003cp\u003e操作文件和目录。\u003c/p\u003e","title":"Linux File"},{"content":"CURD 神器 GORM 包介绍及实战\n1 基础知识  GORM 使用模型（Models）来映射一个数据库表。 默认情况下，使用 ID 作为主键，使用结构体名的 snake_cases 作为表名，使用字段名的 snake_case 作为列名。 并使用 CreatedAt、UpdatedAt、DeletedAt 字段追踪创建、更新和删除时间。  实际开发中建议直接指定字段名和表名。\ntype Animal struct { AnimalID int64 `gorm:\u0026#34;column:animalID;primarykey\u0026#34;` // 将列名设为 `animalID`  Birthday time.Time `gorm:\u0026#34;column:birthday\u0026#34;` // 将列名设为 `birthday`  Age int64 `gorm:\u0026#34;column:age\u0026#34;` // 将列名设为 `age` } func (a *Animal) TableName() string { return \u0026#34;animal\u0026#34; } 2 gorm 原生 sql 执行语句 2.1 执行原生 sql // [rows:1] update user set name = \u0026#39;jinzhu\u0026#39; where name = \u0026#39;xiaobai\u0026#39; and phone in (\u0026#39;1000\u0026#39;,\u0026#39;2\u0026#39;) db.Exec(\u0026#34;update user set name = \u0026#39;jinzhu\u0026#39; where name = ? and phone in ? \u0026#34;, name, []string{\u0026#34;1000\u0026#34;, \u0026#34;2\u0026#34;}) db.Exec(\u0026#34;DROP TABLE users\u0026#34;) 2.2 原生 sql 查找一个数据 type Result struct { ID int Name string Age int } var result Result db.Raw(\u0026#34;SELECT id, name, age FROM users WHERE name = ?\u0026#34;, 3).Scan(\u0026amp;result) 2.3 原生 sql 查找多个数据 type Result struct { ID int Name string Age int } res := make([]*Result,0) db.Raw(\u0026#34;SELECT id, name, age FROM users WHERE name \u0026gt; ?\u0026#34;, 3).Scan(\u0026amp;res) 3 添加数据 3.1 添加一条数据 user := User{ Name: \u0026#34;Jinzhu3\u0026#34;, Password: \u0026#34;123\u0026#34;, Phone: \u0026#34;1\u0026#34;, CreatedAt: time.Now(), } result := db.Create(\u0026amp;user) // 通过数据的指针来创建 log.Printf(\u0026#34;result: id: %v err: %s result.RowsAffected: %v\u0026#34;, user.ID, result.Error, result.RowsAffected)  user.ID：返回插入数据的主键，这个是直接赋值给 user 变量。 result.Error：返回 error。 result.RowsAffected：返回插入记录的条数。  3.2 可以批量插入多条数据 var users = []User{{Name: \u0026#34;jinzhu7\u0026#34;}, {Name: \u0026#34;jinzhu8\u0026#34;}, {Name: \u0026#34;jinzhu9\u0026#34;}} db.Create(\u0026amp;users) for _, user := range users { log.Printf(\u0026#34;id: %v, name: %v\u0026#34;,user.ID,user.Name) } 4 删除数据 4.1 gorm 支持两种删除方式 软删除\n软删除是指执行 Delete 时，记录不会被从数据库中真正删除。GORM 会将 DeletedAt 设置为当前时间，并且不能通过正常的方式查询到该记录。 如果模型包含了一个 gorm.DeletedAt 字段，GORM 在执行删除操作时，会软删除该记录。\n// UPDATE users SET deleted_at=\u0026#34;2013-10-29 10:23\u0026#34; WHERE age = 20; db.Where(\u0026#34;age = ?\u0026#34;, 20).Delete(\u0026amp;User{}) // SELECT * FROM users WHERE age = 20 AND deleted_at IS NULL; db.Where(\u0026#34;age = 20\u0026#34;).Find(\u0026amp;user) GORM 并没有真正把记录从数据库删除掉，而是只更新了 deleted_at 字段。在查询时，GORM 查询条件中新增了AND deleted_at IS NULL条件，所以这些被设置过 deleted_at 字段的记录不会被查询到。 对于一些比较重要的数据，我们可以通过软删除的方式删除记录，软删除可以使这些重要的数据后期能够被恢复，并且便于以后的排障。\n可以通过下面的方式查找被软删除的记录：\n// SELECT * FROM users WHERE age = 20; db.Unscoped().Where(\u0026#34;age = 20\u0026#34;).Find(\u0026amp;users) 永久删除\n如果想永久删除一条记录，可以使用 Unscoped：\n// DELETE FROM orders WHERE id=10; db.Unscoped().Delete(\u0026amp;order) 4.2 删除一条语句 // delete from user where name = \u0026#34;Jinzhu\u0026#34; // UPDATE `user` SET `deletedAt`=\u0026#39;2022-06-16 22:06:59.383\u0026#39; WHERE name = \u0026#39;Jinzhu\u0026#39; AND `user`.`deletedAt` IS NULL db.Where(\u0026#34;name = ?\u0026#34;, \u0026#34;Jinzhu\u0026#34;).Delete(\u0026amp;User{}) 5 更新数据 5.1 更新单条数据 user := \u0026amp;User{} // SELECT * FROM `user` WHERE `user`.`deletedAt` IS NULL ORDER BY `user`.`id` LIMIT 1 db.First(\u0026amp;user) user.Phone = \u0026#34;1000\u0026#34; // UPDATE `user` SET `name`=\u0026#39;\u0026#39;,`password`=\u0026#39;\u0026#39;,`phone`=\u0026#39;1000\u0026#39;,`createdAt`=\u0026#39;2022-06-18 22:34:53\u0026#39;,`updatedAt`=\u0026#39;2022-06-18 22:35:15.23\u0026#39;,`deletedAt`=NULL WHERE `user`.`deletedAt` IS NULL AND `id` = 5 db.Save(user) 通过 Save 方法，可以把 user 变量中所有跟数据库不一致的字段更新到数据库中。 先获取某个资源的详细信息，再通过 user.Phone = \u0026quot;1000\u0026quot; 这类赋值语句，对其中的一些字段重新赋值。最后，调用 Save 方法更新这些字段。\n也可以采用如下方法更新:\nname := \u0026#34;xiaoming\u0026#34; // [8.488ms] [rows:1] UPDATE `user` SET `password`=\u0026#39;123456\u0026#39;,`updatedAt`=\u0026#39;2022-07-19 22:34:27.834\u0026#39; WHERE name = \u0026#39;xiaoming\u0026#39; AND `user`.`deletedAt` IS NULL db.Debug().Model(\u0026amp;User{}).Where(\u0026#34;name = ?\u0026#34;, name).Update(\u0026#34;password\u0026#34;, \u0026#34;123456\u0026#34;) 5.2 更新多条语句 phone := 1 // [8.961ms] [rows:2] UPDATE `user` SET `password`=\u0026#39;1\u0026#39;,`phone`=\u0026#39;2\u0026#39;,`updatedAt`=\u0026#39;2022-07-19 22:40:02.632\u0026#39; WHERE phone = 1 AND `user`.`deletedAt` IS NULL db.Debug().Model(\u0026amp;User{}).Where(\u0026#34;phone = ?\u0026#34;, phone).Updates(User{Password: \u0026#34;1\u0026#34;, Phone: \u0026#34;2\u0026#34;}) 6 查询数据 6.1 获取第一条记录(主键升序) var u User phone := \u0026#34;2\u0026#34; //[7.439ms] [rows:1] SELECT * FROM `user` WHERE phone = \u0026#39;2\u0026#39; AND `user`.`deletedAt` IS NULL ORDER BY `user`.`id` LIMIT 1 result := db.Debug().Where(\u0026#34;phone = ?\u0026#34;, phone).First(\u0026amp;u) log.Println(\u0026#34;result.RowsAffected\u0026#34;, result.RowsAffected) // 找到的记录数 log.Println(\u0026#34;result error\u0026#34;, result.Error) // returns error 6.2 获取最后一条记录(主键降序) var u User\rphone := \u0026#34;2\u0026#34;\r//[7.439ms] [rows:1] SELECT * FROM `user` WHERE phone = \u0026#39;2\u0026#39; AND `user`.`deletedAt` IS NULL ORDER BY `user`.`id` DESC LIMIT 1\rresult := db.Debug().Where(\u0026#34;phone = ?\u0026#34;, phone).Last(\u0026amp;u) 7 事务 func updateVirtualTx(localSql, businessSql string) (err error) { // 开始事务  tx := db.Begin() defer func() { if err != nil { fabricLog.Println(\u0026#34;err\u0026#34;, err.Error()) tx.Rollback() } else { // 否则，提交事务  tx.Commit() } }() // 更新本地数据  sqlRes := tx.Debug().Exec(localSql) err = sqlRes.Error if err != nil { return err } // 判断影响结果这个看情况可要可不要  if sqlRes.RowsAffected \u0026gt; 1 { err = fmt.Errorf(\u0026#34;sqlRes.RowsAffected \u0026gt; 1 localsql: %s\u0026#34;, localSql) return } // 更新业务数据  businessSqlRes := tx.Debug().Exec(businessSql) err = businessSqlRes.Error if err != nil { return err } if businessSqlRes.RowsAffected \u0026gt; 1 { err = fmt.Errorf(\u0026#34;businessSqlRes.RowsAffected \u0026gt; 1 businessSql: %s\u0026#34;, businessSql) return } return } ","permalink":"https://hzw9527.github.io/posts/go/gorm/","summary":"\u003cp\u003eCURD 神器 GORM 包介绍及实战\u003c/p\u003e","title":"Gorm"},{"content":"如何规范go项目目录\n1 如何规范目录  命名清晰: 目录名不要太长，不要太短,清晰，简介,清晰表达该目录实现的功能，目录名采用单数。 功能明确: 当需要新增一个功能时，我们能够非常清楚地知道把这个功能放在哪个目录下。 全面性：目录结构尽可能包含研发过程中需要的功能，例如，文档，脚本，源码管理、API 实现、工具、第三方包、测试、编译产物。 可预测性: 项目规模。 可扩展性。每个目录下存放了同类的功能，在项目变大时，这些目录应该可以存放更多同类功能。  internal 目录用来实现内部代码，app 和 pkg 目录下的所有文件都属于内部代码。如果 internal 目录不管项目大小，永远只有 2 个文件 app 和 pkg，那么就说明 internal 目录是不可扩展的。相反，如果 internal 目录下直接存放每个组件的源码目录（一个项目可以由一个或多个组件组成），当项目变大、组件增多时，可以将新增加的组件代码存放到 internal 目录，这时 internal 目录就是可扩展的。例如：\n$ ls internal/ apiserver authzserver iamctl pkg pump watcher 下面来看2个具体的、可以作为目录规范的目录结构\n2 平铺式目录结构 一个 Go 项目可以是一个应用，也可以是一个代码框架 / 库，当项目是代码框架 / 库时，比较适合采用平铺式目录结构。\n平铺方式就是在项目的根目录下存放项目的代码，整个目录结构看起来更像是一层的，这种方式在很多框架 / 库中存在，使用这种方式的好处是引用路径长度明显减少。\n$ ls glog/ glog_file.go glog.go glog_test.go LICENSE README 3 结构化目录结构 ├── api\r│ ├── openapi\r│ └── swagger\r├── build\r│ ├── ci\r│ ├── docker\r│ │ ├── iam-apiserver\r│ │ ├── iam-authz-server\r│ │ └── iam-pump\r│ ├── package\r├── CHANGELOG\r├── cmd\r│ ├── iam-apiserver\r│ │ └── apiserver.go\r│ ├── iam-authz-server\r│ │ └── authzserver.go\r│ ├── iamctl\r│ │ └── iamctl.go\r│ └── iam-pump\r│ └── pump.go\r├── configs\r├── CONTRIBUTING.md\r├── deployments\r├── docs\r│ ├── devel\r│ │ ├── en-US\r│ │ └── zh-CN\r│ ├── guide\r│ │ ├── en-US\r│ │ └── zh-CN\r│ ├── images\r│ └── README.md\r├── examples\r├── githooks\r├── go.mod\r├── go.sum\r├── init\r├── internal\r│ ├── apiserver\r│ │ ├── api\r│ │ │ └── v1\r│ │ │ └── user\r│ │ ├── apiserver.go\r│ │ ├── options\r│ │ ├── service\r│ │ ├── store\r│ │ │ ├── mysql\r│ │ │ ├── fake\r│ │ └── testing\r│ ├── authzserver\r│ │ ├── api\r│ │ │ └── v1\r│ │ │ └── authorize\r│ │ ├── options\r│ │ ├── store\r│ │ └── testing\r│ ├── iamctl\r│ │ ├── cmd\r│ │ │ ├── completion\r│ │ │ ├── user\r│ │ └── util\r│ ├── pkg\r│ │ ├── code\r│ │ ├── options\r│ │ ├── server\r│ │ ├── util\r│ │ └── validation\r├── LICENSE\r├── Makefile\r├── _output\r│ ├── platforms\r│ │ └── linux\r│ │ └── amd64\r├── pkg\r│ ├── util\r│ │ └── genutil\r├── README.md\r├── scripts\r│ ├── lib\r│ ├── make-rules\r├── test\r│ ├── testdata\r├── third_party\r│ └── forked\r└── tools 一个 Go 项目包含 3 大部分，Go 应用 、项目管理和文档。\n4 go 应用 4.1 go 应用存放前后端代码 1 /web\n前端，存放 Web 静态资源，服务端模板和单页应用（SPAs)。\n2 /cmd\n一个项目有很多组件,可以把组件 main 函数所在的文件夹统一存放在 /cmd 下，例如:\n$ ls cmd/ gendocs geniamdocs genman genswaggertypedocs genyaml iam-apiserver iam-authz-server iamctl iam-pump $ ls cmd/iam-apiserver/ apiserver.go /cmd/\u0026lt;组件名\u0026gt; 下不要存放太多的代码。\n3 /internal\n存放私有应用和库代码。\n /internal/apiserver：该目录中存放真实的应用代码。这些应用的共享代码存放在/internal/pkg 目录下。 /internal/pkg：存放项目内可共享，项目外不共享的包。这些包提供了比较基础、通用的功能，例如工具、错误码、用户验证等功能。  一个示例如下:\n├── apiserver\r│ ├── api\r│ │ └── v1\r│ │ └── user\r│ ├── options\r│ ├── config\r│ ├── service\r│ │ └── user.go\r│ ├── store\r│ │ ├── mysql\r│ │ │ └── user.go\r│ │ ├── fake\r│ └── testing\r├── authzserver\r│ ├── api\r│ │ └── v1\r│ ├── options\r│ ├── store\r│ └── testing\r├── iamctl\r│ ├── cmd\r│ │ ├── cmd.go\r│ │ ├── info\r└── pkg\r├── code\r├── middleware\r├── options\r└── validation /internal 目录大概分为 3 类子目录\n /internal/pkg: 内部共享包存放的目录。 /internal/authzserver、/internal/apiserver、/internal/pump、/internal/iamctl：应用目录，里面包含应用程序的实现代码 /internal/iamctl：对于一些大型项目，可能还会需要一个客户端工具。  每个应用内部目录结构根据功能划分如下：\n /internal/apiserver/api/v1: HTTP API 接口的具体实现，主要用来做 HTTP 请求的解包、参数校验、业务逻辑处理、返回。注意这里的业务逻辑处理应该是轻量级的，如果业务逻辑比较复杂，代码量比较多，建议放到 /internal/apiserver/service 目录下。该源码文件主要用来串流程。 /internal/apiserver/options：应用的 command flag。 /internal/apiserver/service：应用复杂业务处理代码。 /internal/apiserver/store/mysql：一个应用可能要持久化的存储一些数据。 /internal/pkg: 项目内部可以共享的包。  /internal/pkg/code：项目业务 Code 码。 /internal/pkg/validation：一些通用的验证函数。 /internal/pkg/middleware：HTTP 处理链。    4 /pkg\n该目录中存放可以被外部应用使用的代码库。\n5 /vendor\n项目依赖，可通过 go mod vendor 创建。需要注意的是，如果是一个 Go 库，不要提交 vendor 依赖包。\n6 /third_party\n外部帮助工具，分支代码或其他第三方应用，比如我们 fork 了一个第三方 go 包，并做了一些小的改动，我们可以放在目录 /third_party/forked 下。一方面可以很清楚的知道该包是 fork 第三方的，另一方面又能够方便地和 upstream 同步。\n4.2 Go 应用：主要存放测试相关的文件和代码 7 /test\n存放其他外部测试应用和测试数据。\n4.3 Go 应用：存放跟应用部署相关的文件 8 /configs\n配置文件模板或默认配置。可以在这里存放 confd 或 consul-template 模板文件。有一点要注意，配置中不能携带敏感信息，这些敏感信息，我们可以用占位符来替代，例如\napiVersion: v1 user: username: ${CONFIG_USER_USERNAME} # iam 用户名  password: ${CONFIG_USER_PASSWORD} # iam 密码 9 /deployments\n用来存放 Iaas、PaaS 系统和容器编排部署配置和模板（Docker-Compose，Kubernetes/Helm，Mesos，Terraform，Bosh）。 当前软件部署基本都在朝着容器化的部署方式去演进，所以这类跟 Kubernetes 相关的目录放到目录结构中。\n10 /init\n存放初始化系统（systemd，upstart，sysv）和进程管理配置文件。比如 sysemd 的 unit 文件。这类文件，在非容器化部署的项目中会用到。\n5 项目管理 5.1 项目管理：存放用来管理 Go 项目的各类文件 11 /Makefile\n一个 Go 项目在其根目录下应该有一个 Makefile 工具，用来对项目进行管理，Makefile 通常用来执行静态代码检查、单元测试、编译等功能。\n直接执行 make 时，执行如下各项 format -\u0026gt; lint -\u0026gt; test -\u0026gt; build，如果是有代码生成的操作，还可能需要首先生成代码 gen -\u0026gt; format -\u0026gt; lint -\u0026gt; test -\u0026gt; build。\n实际开发中，我们可以将一些重复性的工作自动化，并添加到 Makefile 文件中统一管理。\n12 /scripts\n存放脚本文件，实现构建、安装、分析等不同功能,不同项目，里面可能存放不同的文件,通常可以考虑包含以下 3 个目录：\n /scripts/make-rules：用来存放 makefile 文件，实现 /Makefile 文件中的各个功能。Makefile 有很多功能，为了保持它的简洁，我建议你将各个功能的具体实现放在/scripts/make-rules 文件夹下。 /scripts/lib ：shell 库，用来存放 shell 脚本。一个大型项目中有很多自动化任务，比如发布、更新文档、生成代码等，所以要写很多 shell 脚本，这些 shell 脚本会有一些通用功能，可以抽象成库，存放在/scripts/lib 目录下，比如 logging.sh，util.sh 等。 /scripts/install ：如果项目支持自动化部署，可以将自动化部署脚本放在此目录下。如果部署脚本简单，也可以直接放在 /scripts 目录下。  shell 脚本中的函数名，建议采用语义化的命名方式，例如 iam::log::info 这种语义化的命名方式，可以使调用者轻松的辨别出函数的功能类别，便于函数的管理和引用。 在 Kubernetes 的脚本中，就大量采用了这种命名方式。\n13 /build\n存放安装包和持续集成相关的文件。\n /build/package：存放容器（Docker）、系统（deb, rpm, pkg）的包配置和脚本。 /build/ci：存放 CI（travis，circle，drone）的配置文件和脚本。 /build/docker：存放子项目各个组件的 Dockerfile 文件。  14 /tools\n存放这个项目的支持工具。这些工具可导入来自 /pkg 和 /internal 目录的代码。\n15 /githooks\nGit 钩子。比如，我们可以将 commit-msg 存放在该目录。\n16 /assets\n项目使用的其他资源 (图片、CSS、JavaScript 等)。\n17 /website\n如果你不使用 GitHub 页面，那么可以在这里放置项目网站相关的数据。\n6 文档 18 /README.md\n一般包含了项目的介绍、功能、快速安装和使用指引、详细的文档链接以及开发指引等。 有时候 README 文档会比较长，为了能够快速定位到所需内容，需要添加 markdown toc 索引，可以借助工具 tocenize 来完成索引的添加\n我们也介绍过 README 是可以规范化的，所以这个 README 文档，可以通过脚本或工具来自动生成。\n19 /docs\n存放设计文档、开发文档和用户文档等。\n /docs/devel/{en-US,zh-CN}：存放开发文档、hack 文档等。 /docs/guide/{en-US,zh-CN}: 存放用户手册，安装、quickstart、产品文档等，分为中文文档和英文文档。 /docs/images：存放图片文件。  20 /CONTRIBUTING.md\n是一个开源就绪的项目，最好还要有一个 CONTRIBUTING.md 文件，用来说明如何贡献代码，如何开源协同。CONTRIBUTING.md 不仅能够规范协同流程，还能降低第三方开发者贡献代码的难度\n21 /api\n/api 目录中存放的是当前项目对外提供的各种不同类型的 API 接口定义文件。其中可能包含类似 /api/protobuf-spec、/api/thrift-spec、/api/http-spec、openapi、swagger 的目录，这些目录包含了当前项目对外提供和依赖的所有 API 文件\n如下是 IAM 项目的 /api 目录：\n├── openapi/\r│ └── README.md\r└── swagger/\r├── docs/\r├── README.md\r└── swagger.yaml 二级目录的主要作用，就是在一个项目同时提供了多种不同的访问方式时，可以分类存放。用这种方式可以避免潜在的冲突，也能让项目结构更加清晰\n22 /LICENSE\n版权文件可以是私有的，也可以是开源的。常用的开源协议有：Apache 2.0、MIT、BSD、GPL、Mozilla、LGPL。有时候，公有云产品为了打造品牌影响力，会对外发布一个本产品的开源版本，所以在项目规划初期最好就能规划下未来产品的走向，选择合适的 LICENSE。\n为了声明版权，你可能会需要将 LICENSE 头添加到源码文件或者其他文件中，这部分工作可以通过工具实现自动化，推荐工具： addlicense 。\n当代码中引用了其它开源代码时，需要在 LICENSE 中说明对其它源码的引用，这就需要知道代码引用了哪些源码，以及这些源码的开源协议，可以借助工具来进行检查，推荐工具： glice 。\n至于如何说明对其它源码的引用，大家可以参考下 IAM 项目的 LICENSE 文件。\n23 /CHANGELOG\n为了方便了解当前版本的更新内容或者历史更新内容，需要将更新记录存放到 CHANGELOG 目录。\n编写 CHANGELOG 是一个复杂、繁琐的工作，我们可以结合 Angular 规范 和 git-chglog 来自动生成 CHANGELOG。\n24 /examples\n存放应用程序或者公共包的示例代码。这些示例代码可以降低使用者的上手门槛。\n7 不建议的目录 1 /src/\n一些开发语言，例如 Java 项目中会有 src 目录。在 Java 项目中， src 目录是一种常见的模式，但在 Go 项目中，不建议使用 src 目录 在默认情况下，Go 语言的项目都会被放置到$GOPATH/src 目录下。这个目录中存放着所有代码，如果我们在自己的项目中使用/src 目录，这个包的导入路径中就会出现两个 src，例如\n$GOPATH/src/github.com/marmotedu/project/src/main.go 这样的目录结构看起来非常怪。\n1 xxs/\n在 Go 项目中，要避免使用带复数的目录或者包。建议统一使用单\n8 一些建议 对于小型项目，可以考虑先包含 cmd、pkg、internal 3 个目录，其他目录后面按需创建\n$ tree --noreport -L 2 tms\rtms\r├── cmd\r├── internal\r├── pkg\r└── README.md 另外，在设计目录结构时，一些空目录无法提交到 Git 仓库中，但我们又想将这个空目录上传到 Git 仓库中，以保留目录结构。这时候，可以在空目录下加一个 .keep 文件，例如：\n$ ls -A build/ci/ .keep ","permalink":"https://hzw9527.github.io/posts/go/go_dir_design/","summary":"\u003cp\u003e如何规范go项目目录\u003c/p\u003e","title":"Go_dir_design"},{"content":"go 安装教程\n1 go 环境配置 下载源码\n$ wget -P /tmp/ https://golang.google.cn/dl/go1.18.3.linux-amd64.tar.gz 解压安装\n$ mkdir -p $HOME/go $ tar -xvzf /tmp/go1.18.3.linux-amd64.tar.gz -C $HOME/go $ mv $HOME/go/go $HOME/go/go1.18.3 环境变量追加到 $HOME/.bashrc\n$ tee -a $HOME/.bashrc \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; # Go envs export GOVERSION=go1.18.3 # Go 版本设置 export GO_INSTALL_DIR=$HOME/go # Go 安装目录 export GOROOT=$GO_INSTALL_DIR/$GOVERSION # GOROOT 设置 export GOPATH=$WORKSPACE/golang # GOPATH 设置 export PATH=$GOROOT/bin:$GOPATH/bin:$PATH # 将 Go 语言自带的和通过 go install 安装的二进制文件加入到 PATH 路径中 export GO111MODULE=\u0026#34;on\u0026#34; # 开启 Go moudles 特性 export GOPROXY=https://goproxy.cn,direct # 安装 Go 模块时，代理服务器设置 export GOPRIVATE= export GOSUMDB=off # 关闭校验 Go 依赖包的哈希值 EOF 2 go 的环境变量的意义 GOROOT\ngo 编译工具，标准库的安装路径。\nGOPATH\ngo 的工作目录和 import 包的导入目录。\n 默认不设置的情况下，unix 中为 $HOME/go， window 为 C:\\Users\\YourName\\go。 GOPATH 不能与您的 Go 安装路径相同。 在 GOPATH 下创建 bin 目录，go 编译后生成的二进制文件将存放在此目录。     环境变量 含义     GOROOT Go 语言编译工具、标准库等的安装路径   GOPATH Go的工作目录,也就是编译后二进制文件的存放目录和 import 包时的搜索路径。 默认不设置的情况下，unix 中为 $HOME/go， window 为 C:\\Users\\YourName\\go。 GOPATH 不能与您的 Go 安装路径相同。 在 GOPATH 下创建 bin 目录，go 编译后生成的二进制文件将存放在此目录。   GO111MODULE 通过设置 on、off、auto  来控制是否开启 Go modules 特性。其中 on 代表开启 GO modules, 这会让 go 编译器忽略 $GOPATH 和 vendor 文件夹，只根据 go.mod 下载依赖。off 代表关闭 go modules 特性，这回让 go 编译器在 $GOPATH  和 vendor 目录来查找依赖关系，也就是继续使用 GOPATH 模式。而 auto 在 go 1.14 后的版本是默认值。设置为 auto 后，源码在 $gopath/src下，并且没有 go.mod 则关闭 go modules,其他情况都开启 go modules。   goproxy go包下载代理服务器。国内无法访问 golang.org 和 Google 等网站，但是在日常开发中使用的很多依赖包都要从 Google 上下载.为了解决加载依赖的问题，以便我们可以使用 go get 下载。 direct 作用：当 go 抓取目标包时，如果遇见了 404 错误，那么就会直接通过目标的源头获取，而不再通过设置的代理服务器下载。   GOPRIVATE 指定不走代理的下载 go 包的域名，go get 正常通过代理服务器获取私有仓库（内部站点或者私有站点），代理服务器不可能访问到私有仓库，会出现 404 错误，设置 GOPAIVATE 变量，可以让以该域名开头的包不走代理，直接下载。 go env -w GOPRIVATE = .gitlab.com,.gitee.com 。   GOSUMDB GOSUMDB 的值是一个 web 服务器，默认是 sum.golang.org，该服务可以用来查询依赖包指定版本的哈希值，保证拉取到的模块版本数据未经过篡改。      建议在日常开发中 GO111MODULE 设置为 on。\n  使用 go mod 时， $GOPATH 虽说时无意义的，但是还是会把下载的依赖存在 $GOPATH/pkg/mod 中，也会把 go intall 安装的的二进制文件存放在 $GOPATH/bin 的目录中。\n  $GOPATH/bin、$GOROOT/bin 加入到 PATH 环境变量中，这样就可以直接使用 go 自带和 go install 安装的命令。\n ","permalink":"https://hzw9527.github.io/posts/go/go_install/","summary":"\u003cp\u003ego 安装教程\u003c/p\u003e","title":"Go_install"},{"content":"linux查看文件的几个命令。\n1 选项与参数  命令之后通常会跟随一个能够修改命令行为的选项，接着一个或者多个参数(表示命令操作的对象)。 大部分命令都支持短选项，也就是在单个字符前面加上连字符 -l,很多短选项可以串在一起使用。 长选项 --l  2 ls 命令 -a --all | 列出所有文件，包含以点开头的隐藏文件 -A --almost-all | 列出所有文件，不包含以 . 和 .. 开头的文件 -d,--directory | ls 目录，会显示出目录下的所有内容，-ld 可以查看目录本身的详细信息，而不是目录包含的内容 -F,--classify | 每个列出的名称后面加上类型指示符，如果是目录会在后面加上 / -h,--human-readable | 长选项的格式中显示文件大小不在以默认的单位字节(B)显示，以人类可读形式显示 -l | 长选项显示 -r,--reverse | 降序显示输出，默认情况是按照字符升序显示 -S | 按照文件从大到小排序 -t | 按照修改日期最新-\u0026gt;最早排序 3 进一步了解长格式 [root@VM-16-4-centos going]# ls -l total 16 -rw-r--r-- 1 going going 1943 Feb 22 23:02 bashrc.iam.backup drwxrwxr-x 2 going going 4096 Feb 22 22:50 bin drwxrwxr-x 4 going going 4096 Feb 22 23:06 go drwxrwxr-x 15 going going 4096 Jun 29 16:38 workspace 从左到右含义如下：\n -rw-r--r--: 文件访问权限,第一个字符表示文件类型。连字符(-) 表示普通文件，d 表示目录。接下来的三个字符文件属主的访问权限，后续的3个字符表示 文件属组的访问权限，最后3个字符表示其他人的访问权限。 1: 文件的硬链接数量。 going: 文件属主。 1943: 文件大小。 Feb 22 23:02: 文件最后修改日期和时间。  4 file 命令 file 命令确定文件类型\n$ file 1.jpg 1.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 96x96, segment length 16, baseline, precision 8, 1920x1080, frames 3 linux 系统中万物皆文件。\n5 使用 less 查看文本文件 less 这个名字表示 少即是多- 这是现代主义建筑师和设计师的座右铭。less 程序属于分页程序，可以前后翻页。\nless 常用命令\npage up 或 b | 后翻一页 page down 或 空格 | 前翻一页 上方向键 | 向后一行 下方向键 | 向前一行 G | 移到文本末尾 1G 或 g | 移到文本开头 /char | 向前搜索指定的字符串 n | 重复上一次搜索 h | 显示帮助信息 q | 退出 less 命令 less 如果看了非文的文件可以输入 reset 恢复\n6 linux 目录 / | 根目录,所有目录都来源于此。\r/bin | 包含系统引导和执行所必须的二进制文件。\r/boot | 包含linux 内核，初始化 RAM 磁盘镜像，以及引导装载器。\r/dev | 包含设备节点的特殊目录。万物皆文件也适用于设备。linux 内核在其中维护着能够识别的设备。\r/etc | 系统范围内所有的配置文件，还包含一组用于在引导期间启动各个系统服务的 shell 脚本， /etc/crontab 文件定义了何时执行自动化作业；\r| /etc/fstab: 改文件指定了存储的设备以及其关联的挂载点。/etc/passwd,改文件包含了系统当中所有的用户信息。\r/lib | 包含系统核心程序用到额共享库文件。类似于 windows 中的动态链接库。\r/lost + found | 用于文件系统损坏时的恢复。除非系统发生严重问题，否则这个目录总是空的。\r/media | 包含各种可移动的存储设备(USB设备等等)的挂载点，这些设备插入时自动挂载。\r/mnt | 包含了手动挂载的各种可移动存储设备的挂载点。\r/opt | 用于安装可选文件,主要存放系统可能安装的商业软件。\r/proc | linux 内核维护的虚拟文件系统，并非存在于硬盘上的真实的文件系统，这些文件都是可读的，可以从中了解内核如何管理计算机。\r/root | 超级用户的主目录。\r/sbin | 包含系统的二进制可执行文件。主要负责执行重要的系统任务，通常保留给超级用户使用。\r/tmp | 保存各种程序生成的临时文件，有些程序会使该目录在每次系统重新引导时都被清空。\r/usr/bin | /usr/bin 中的程序要用到的共享库。\r/usr/lib | /usr/bin 中要用到的共享库。\r/usr/share | 包含/usr/bin 中的程序用到的共享数据。其中包括默认的配置文件，图标，桌面背景，声音文件。\r/usr/share/doc| 系统中安装的大部分软件包自带文档。\r/var | 除/tmp和/home外目前看到的目录都是相对静态的，目录内容不怎么发生变化，那些可能会改变的数据保存在/var目录树中，各种数据库，用户邮件都在其中。\r/var/log | 包含日志文件和各种系统活动记录，其中比较有用的是/var/log/message和/var/log/syslog。 7 符号链接 在大多数的 unix 系统中，一个文件可以被多个文件引用。比如下面这个符号连接 a 指向 main.go\nlrwxrwxrwx 1 root root 7 Jul 26 22:57 a -\u0026gt; main.go 符号连接的一个典型的应用场景就是版本库的一个使用：\n比如某个程序需要使用包含在某个文件 foo 中的程序，但该文件变化频繁，最好能在文件名中加入版本号这样超级用户或者其他相关用户可以知道安装的是foo 哪个版本 ,但是共享文件的版本号如果修改，导致程序引用该资源的地方必须做出相应的版本变更,以便可以找到新的共享资源。\n这时我们就可以为当前版本的文件库，比如 foo-2.6 创建一个符号连接 foo，然后程序引用这个符号连接，这意味着当程序打开这个符号连接的时候实际上打开的是文件 foo-2.6,\n当要升级到 foo-2.7，我们只需要将 foo-2.7文件加入系统，删除符号连接 foo，在创建一个指向新版本的符号连接即可，这样解决了版本升级，以及可以随时切换版本的问题。\n","permalink":"https://hzw9527.github.io/posts/linux/ls/","summary":"\u003cp\u003elinux查看文件的几个命令。\u003c/p\u003e","title":"探索linux系统"},{"content":"go 的简单的定时器\n1 自动执行定时器 t := time.NewTicker(time.Duration(1) * time.Second) for { select { case \u0026lt;-t.C: fmt.Println(1) } } 每隔 1 秒打印。\n2 简单定时器重置定时器 waitTime := time.Second * time.Duration(2) ter := time.NewTimer(waitTime) for { \u0026lt;-ter.C fmt.Println(\u0026#34;==========================\u0026#34;) // 只有重置后才会进行下一次循环  ter.Reset(waitTime) } 每隔 2 秒打印。\n","permalink":"https://hzw9527.github.io/posts/go/timer/","summary":"\u003cp\u003ego 的简单的定时器\u003c/p\u003e","title":"Timer"},{"content":"linux 文件系统中导航。\n1 理解文件系统树 和 windows 一样，unix 系统也是按照有层次的目录结构组织文件的。\n在 windows 中，每个存储设备都有独立的文件系统树。而在类 UNIX 中，不管计算机安装了多少存储设备，都只有一个文件系统树。按照超级用户的设置，存储设备 将会挂载到文件系统的不同位置。\n2 当前工作目录  pwd: 打印当前的工作目录。 ls : 列出任意目录的内容。  绝对路径\n系统中有一个目录，大多数程序都安装在其中，目录的路径为 /usr/bin。绝对路径是从根目录开始，随后紧接着一个又一个分支，直到目标目录或者文件。\n相对路径\n . : 代表当前工作目录, cd ./bin 日常可以省略 ./ 直接写成 cd bin。 ..: 上一级目录。  3 unix 文件名的重要说明  linux 中以点号开头的文件是隐藏的， ls 不会列出这些文件，除非使用 ls -a 可以看到隐藏文件。 创建账户时，主目录会放置一些用户配置账户的隐藏文件。 有些应用程序也会把自己的配置文件放在主目录当中。 linux 文件名和命令区分大小写， 文件名 file 和 File 是不同的文件。 linux 文件名支持标点符号仅限于 点号，下划线，半字线，空格，虽然支持空格但是不要在其中使用空格,会产生一些不必要的麻烦。 linux 操作系统中没有文件扩展名的概念，想怎么命名都可以。尽管不使用文件扩展名决定文件内容或者用途，但是很多应用程序都是这么做的。  4 一些有用的便捷写法 cd | 当前工作目录更改为用户主目录 cd - | 切换到前一个工作目录 cd ~user_name | 切换到用户名为 `user_name` 的主目录。例如，输入 `cd ~alice`,切换到用户 `alice` 的主目录。 ","permalink":"https://hzw9527.github.io/posts/linux/file_navigation/","summary":"\u003cp\u003elinux 文件系统中导航。\u003c/p\u003e","title":"file navigation"},{"content":"时间复杂度基本介绍。\n1 时间复杂度分析   每一行代码都会编译成几条机器指令，最后由 CPU 执行，\n  机器指令的平均执行时间为 uint_time\nsum := 0\t// 执行一次 k1 条指令 for i := 0; i \u0026lt; n; i++ {\t// 执行n次 k2 条指令 \tsum += i\t// 执行n次 k3 条指令 } fmt.Println(sum)\t// 执行1次 k4 条指令   多行代码的执行时间总和为 k1*uint_time + n*k2*uint_time + n*k3*uint_time + \u0026hellip;. + kn * uint_time,总计就是\n(k1+kn)*uint_time + n(k2+k3)*uint_time 当代码数量比较多的时候这样下去时间就没法分析\n2 大 O 时间复杂度表示法  表示数据规模很大的执行效率 忽略低阶，常量，系数 表示执行时间随数据规模的增长趋势，而不是具体的执行时间  其实时间复杂度就是和执行次数最多的那段代码的执行次数成正比，时间复杂度分析仅限于功能相同的代码之间比较分析\n2.1 大 O 时间复杂度练习 result := 0 // 执行1次 \tfor i := 1; i \u0026lt;= n; i++ { // 执行 N 次 \tfor j := 1; j \u0026lt;= n; j++ { // 执行 N*N \tresult += result + i*j // 执行 N*N \t} } 复杂度为 2n*n + n 大 O 复杂度也就是 O(n*n)，上面的计算可以简化为 1*(1+2+3+...+n) + 2*(1+2+3+...+n) +...+ n*(1+2+3+...+n)\n可以采用如下计算方式\ntmp := 0 for i := 1; i \u0026lt;= n; i++ { // n 次  tmp = tmp + i // n 次 } result := 0 for j := 1;j \u0026lt;= n; j++ { // n 次 \tresult = result + j*tmp // n 次 } 上面的时间复杂度是 O(n)\n时间复杂度比较仅限于功能相同的代码之间的比较,如果两段代码功能不同,比较时间复杂度就没有意义\n3 几种常见的时间复杂度分析 3.1 O(logn) 对数级时间复杂度 func f4(n int) int {\ri := 1\rfor i \u0026lt;= n {\ri = i * 2\r}\rreturn i\r} 最多执行次数明显是 for 循环，需要知道执行多少次，也就是 i \u0026gt;n 的时候会终止，需要知道执行的次数\ni 一次 2\ri 2次 4 2的 k 次方 = n k = log2n 最终 k 只需要比 logn 大一点点就可以\n","permalink":"https://hzw9527.github.io/posts/argo/complexity/","summary":"","title":"Complexity"},{"content":"自定义 log 的使用\n1 type.go 设计类型时可以单独建议这么一个文件设计类型：比如下面这类信息都可以\nconst ( KeyRequestID string = \u0026#34;requestID\u0026#34; KeyUsername string = \u0026#34;username\u0026#34; KeyWatcherName string = \u0026#34;watcher\u0026#34; ) type Level = zapcore.Level var ( // DebugLevel logs are typically voluminous, and are usually disabled in  // production.  DebugLevel = zapcore.DebugLevel // InfoLevel is the default logging priority.  InfoLevel = zapcore.InfoLevel // WarnLevel logs are more important than Info, but don\u0026#39;t need individual  // human review.  WarnLevel = zapcore.WarnLevel // ErrorLevel logs are high-priority. If an application is running smoothly,  // it shouldn\u0026#39;t generate any error-level logs.  ErrorLevel = zapcore.ErrorLevel // PanicLevel logs a message, then panics.  PanicLevel = zapcore.PanicLevel // FatalLevel logs a message, then calls os.Exit(1).  FatalLevel = zapcore.FatalLevel ) 2 日志配置 type Options struct { OutputPaths []string `json:\u0026#34;output-paths\u0026#34; mapstructure:\u0026#34;output-paths\u0026#34;` ErrorOutputPaths []string `json:\u0026#34;error-output-paths\u0026#34; mapstructure:\u0026#34;error-output-paths\u0026#34;` Level string `json:\u0026#34;level\u0026#34; mapstructure:\u0026#34;level\u0026#34;` Format string `json:\u0026#34;format\u0026#34; mapstructure:\u0026#34;format\u0026#34;` DisableCaller bool `json:\u0026#34;disable-caller\u0026#34; mapstructure:\u0026#34;disable-caller\u0026#34;` DisableStacktrace bool `json:\u0026#34;disable-stacktrace\u0026#34; mapstructure:\u0026#34;disable-stacktrace\u0026#34;` EnableColor bool `json:\u0026#34;enable-color\u0026#34; mapstructure:\u0026#34;enable-color\u0026#34;` Development bool `json:\u0026#34;development\u0026#34; mapstructure:\u0026#34;development\u0026#34;` Name string `json:\u0026#34;name\u0026#34; mapstructure:\u0026#34;name\u0026#34;` } Options 配置含义\n development：是否是开发模式。如果是开发模式，会对 DPanicLevel 进行堆栈跟踪。 name：Logger 的名字。 disable-caller：是否开启 caller，如果开启会在日志中显示调用日志所在的文件、函数和行号。false 显示行号，true 不显示 disable-stacktrace：是否在 Panic 及以上级别禁止打印堆栈信息。 enable-color：是否开启颜色输出，true，是；false，否。 level：日志级别，该级别及以上级别的日志会打印，优先级从低到高依次为：Debug, Info, Warn, Error, Dpanic, Panic, Fatal。 format：支持的日志输出格式，目前支持 Console 和 JSON 两种。Console 其实就是 Text 格式。 output-paths：支持输出到多个输出，用逗号分开。支持输出到标准输出（stdout）和文件。 error-output-paths：zap 内部 (非业务) 错误日志输出路径，多个输出，用逗号分开,并不是业务的错误输出位置  3 日志打印 自己实现的日志包支持 3 种日志记录方法:\nlog.Info(\u0026#34;This is a info message\u0026#34;, log.Int32(\u0026#34;int_key\u0026#34;, 10)) log.Infof(\u0026#34;This is a formatted %s message\u0026#34;, \u0026#34;info\u0026#34;) log.Infow(\u0026#34;Message printed with Infow\u0026#34;, \u0026#34;X-Request-ID\u0026#34;, \u0026#34;fbf54504-64da-4088-9b86-67824a7fb508\u0026#34;)  info: 使用指定的 key/value 记录日志。 Infof: 格式化记录日志。 Infow 也是使用指定的 key/value 记录日志  上述日志输出为\n2021-07-06 14:02:07.070 INFO This is a info message {\u0026#34;int_key\u0026#34;: 10} 2021-07-06 14:02:07.071 INFO This is a formatted info message 2021-07-06 14:02:07.071 INFO Message printed with Infow {\u0026#34;X-Request-ID\u0026#34;: \u0026#34;fbf54504-64da-4088-9b86-67824a7fb508\u0026#34;} 4 log 包其他功能 4.1 WithValues 函数 lv := log.WithValues(\u0026#34;X-Request-ID\u0026#34;, \u0026#34;7a7b9f24-4cae-4b2a-9464-69088b45b904\u0026#34;) lv.Infow(\u0026#34;Info message printed with [WithValues] logger\u0026#34;) lv.Infow(\u0026#34;Debug message printed with [WithValues] logger\u0026#34;) 经过 withvalues 生成的日志可以让后续的日志都打印出对应的 key value\n上述输出结果:\n2021-07-06 14:15:28.555 INFO Info message printed with [WithValues] logger {\u0026#34;X-Request-ID\u0026#34;: \u0026#34;7a7b9f24-4cae-4b2a-9464-69088b45b904\u0026#34;} 2021-07-06 14:15:28.556 INFO Debug message printed with [WithValues] logger {\u0026#34;X-Request-ID\u0026#34;: \u0026#34;7a7b9f24-4cae-4b2a-9464-69088b45b904\u0026#34;} 4.2 log 与 context log 包提供 WithContext 和 FromContext 用来将指定的 Logger 添加到某个 Context 中，以及从某个 Context 中获取 Logger\n// Context使用 // 日志添加到 context 中 ctx := lv.WithContext(context.Background()) // 获取该 context 中的 log lc := log.FromContext(ctx) lc.Info(\u0026#34;Message printed with [WithContext] logger\u0026#34;) 一个简单的例子\n4.3 方便使用 context 实现调用链 如果你的函数调用之间包含 context 参数传递, 可以很方便地从 Context 中提取出指定的 key-value，作为上下文添加到日志输出中\n// L method output with specified context value. func L(ctx context.Context) *zapLogger { return std.L(ctx) } func (l *zapLogger) L(ctx context.Context) *zapLogger { lg := l.clone() requestID, _ := ctx.Value(KeyRequestID).(string) username, _ := ctx.Value(KeyUsername).(string) lg.zapLogger = lg.zapLogger.With(zap.String(KeyRequestID, requestID), zap.String(KeyUsername, username)) return lg } L() 方法会从传入的 Context 中提取出 requestID 和 username ，追加到 Logger 中，并返回 Logger。 这时候调用该 Logger 的 Info、Infof、Infow 等方法记录日志，输出的日志中均包含 requestID 和 username 字段，例如：\n2021-07-06 14:46:00.743 INFO apiserver secret/create.go:23 create secret function called. {\u0026#34;requestID\u0026#34;: \u0026#34;73144bed-534d-4f68-8e8d-dc8a8ed48507\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;admin\u0026#34;} ","permalink":"https://hzw9527.github.io/posts/go/log_use/","summary":"\u003cp\u003e自定义 log 的使用\u003c/p\u003e","title":"Log_use"},{"content":"什么是 shell\n1 shell 简介 shell 是一个程序，接收键盘输入的命令并将其传给操作系统来执行。 bash 是 Bourne Again Shell 的缩写，表示 shell 是 bash 的增强版\n2 终端提示符 用户名@机器名，当前工作目录以及一个 $ 。 提示符是 # 表明终端会话具有超级用户权限，意味着超级用户登陆或则终端提供了超级用户权限。\n普通用户\n[ops@iZuf69hm5b9pscn9oukqbvZ ~]$ 超级用户或者终端提供了超级用户权限\n[root@VM-16-4-centos ~]#  3 终端复制粘贴  windows 终端: 选中内容接着鼠标中间点击  4 几个简单的命令 - date | 时间日期 - cal | 日历 `calendar` - df | 磁盘 - free | 内存容量 - exit | 结束终端 - ctrl + D | 结束终端 ","permalink":"https://hzw9527.github.io/posts/linux/shell/","summary":"\u003cp\u003e什么是 shell\u003c/p\u003e","title":"Shell"},{"content":"docker 简介。\n1 环境配置的难题 软件要运行需要操作系统设置正确，各种软件和库以及环境变量设置正常，软件可以带环境安装，安装的时候把原始环境一模一样地复制过来，这就是 docker 要解决的问题。\n2 虚拟机 也是一种带环境安装软件的一种方案，可以在一个操作系统中安装另一个操作系统。\n虚拟机的缺点如下：\n 资源占用多，占用内存和硬盘空间 冗余步骤多，需要系统层级的登陆 启动慢，虚拟机的启动速度和操作系统一样  3 linux 容器 Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。 或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离\n(1) 启动快\n容器里面的应用，直接就是底层系统的一个进程，启动容器相当于启动本机的一个进程\n(2)资源占用少\n虚拟机由于是完整的操作系统，不可避免要占用所有资源，容器只占用需要的资源，不占用那些没有用到的资源，\n另外，多个容器可以共享资源，虚拟机都是独享资源。\n(3)体积小 虚拟机是整个操作系统的打包,容器只要包含用到的组件即可，容器文件比虚拟机文件要小很多。\n总之，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。\n4 docker 4.1 什么是 docker Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。\nDocker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。\n总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。\n5 docker 镜像 Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。\nimage 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成\n拉取镜像\n$ docker image pull library/hello-world docker image pull是抓取 image 文件的命令,library/hello-world是 image 文件在仓库里面的位置, 其中library是 image 文件所在的组，hello-world是 image 文件的名字， 由于 Docker 官方提供的 image 文件，都放在library组里面，所以它的是默认组，可以省略。因此，上面的命令可以写成下面这样\n$ docker image pull hello-world 6 容器文件 image 文件生成的容器实例，本身也是一个文件，称为容器文件。 也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。 而且关闭容器并不会删除容器文件，只是容器停止运行而已。\n7 dockerfile 文件 是一个文本文件，用来配置 image，Docker 根据该文件生成二进制的 image 文件\n7.1 编写 dockerfile 文件 项目根目录下新建 .dockerignore 文件可以排除路径，表示不加入 image 文件，没有不用建立改文件\n.git node_modules npm-debug.log 项目根目录下新建 Dockerfile 文件。实例：\nFROMnode:8.4COPY .. /appWORKDIR/appRUN npm install --registry=https://registry.npm.taobao.orgEXPOSE3000 FROM node:8.4: 该 image 文件继承官方的 node image，冒号表示标签，这里标签是8.4，即8.4版本的 node。 COPY . /app： 将当前目录下的所有文件（除了.dockerignore排除的路径），都拷贝进入 image 文件的/app目录。 WORKDIR /app： 指定接下来的工作路径为/app。 RUN npm install：在/app目录下，运行npm install命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。 EXPOSE 3000: 将容器 3000 端口暴露出来， 允许外部连接这个端口。  7.2 创建 image 文件 Dockerfile 文件所在目录执行如下命令\n$ docker image build -t koa-demo . # 或者 $ docker image build -t koa-demo:0.0.1 .  -t : 指定 image 文件名字,后面还可以用冒号指定标签，不指定，默认的标签是latest .: 最后的那个点表示 Dockerfile 文件所在的路径 执行成功, docker image ls 查看新生成的镜像文件  7.3 生成容器 docker container run 命令会从 image 文件生成容器\n$ docker container run -p 8000:3000 -it koa-demo /bin/bash # 或者 $ docker container run -p 8000:3000 -it koa-demo:0.0.1 /bin/bash 参数含义：\n -p参数：容器的 3000 端口映射到本机的 8000 端口。 -it参数：容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。 koa-demo:0.0.1：image 文件的名字（如果有标签，还需要提供标签，默认是 latest 标签）。 /bin/bash：容器启动以后，内部第一个执行的命令。这里是启动 Bash，保证用户可以使用 Shell。  命令成功后会返回一个命令行提示符。\nroot@66d80f4aaf1e:/app# 表示你已经在容器里面,返回的提示符就是容器内部的 Shell 提示符。执行下面的命令\nroot@66d80f4aaf1e:/app# node demos/01.js 这时，Koa 框架已经运行起来了。打开本机的浏览器，访问 http://127.0.0.1:8000，网页显示 \u0026quot;Not Found\u0026quot; ，这是因为这个 demo 没有写路由。 这个例子中，Node 进程运行在 Docker 容器的虚拟环境里面，进程接触到的文件系统和网络接口都是虚拟的，与本机的文件系统和网络接口是隔离的，因此需要定义容器与物理机的端口映射（map）\n在容器的命令行，按下 Ctrl + c 停止 Node 进程，然后按下 Ctrl + d （或者输入 exit）退出容器。 docker container kill 也可以终止容器\n7.4 CMD 命令 CMD 是容器启动后执行的命令。 dockerfile 文件指定 CMD 命令以后，docker container run 命令就不能附加命令了（比如前面的/bin/bash），否则它会覆盖CMD命令\n上一节的例子里面，容器启动以后，需要手动输入命令 node demos/01.js 。我们可以把这个命令写在 Dockerfile 里面\nFROMnode:8.4COPY . /appWORKDIR/appRUN npm install --registry=https://registry.npm.taobao.orgEXPOSE3000CMD node demos/01.jsRUN 命令在 image 文件的构建阶段执行，执行结果都会打包进入 image 文件, 一 个 Dockerfile 可以包含多个RUN命令，但是只能有一个CMD命令\n7.5 发布 image 文件 容器运行成功后，就确认了 image 文件的有效性。这时，我们就可以考虑把 image 文件分享到网上，让其他人使用\n首先，去 hub.docker.com 或 cloud.docker.com 注册一个账户。然后，用下面的命令登录。\n$ docker login 接着，为本地的 `image 标注用户名和版本。\n$ docker image tag [imageName] [username]/[repository]:[tag] # 实例 $ docker image tag koa-demos:0.0.1 ruanyf/koa-demos:0.0.1 也可以不标注用户名，重新构建一下 image 文件。\n$ docker image build -t [username]/[repository]:[tag] . 最后，发布 image 文件。\n$ docker image push [username]/[repository]:[tag] ","permalink":"https://hzw9527.github.io/posts/docker/docker_introduction/","summary":"\u003cp\u003edocker 简介。\u003c/p\u003e","title":"Docker_introduction"},{"content":"docker 搭建 wordpress\n1 搭建 PHP 镜像 1.1 新建一个工作目录，并进入该目录 $ mkdir docker-demo \u0026amp;\u0026amp; cd docker-demo 1.2 基于 php 的 image 文件新建一个容器，并且运行该容器 $ docker container run \\  --rm \\  -p:8000:80 \\  --name wordpress \\  --volume \u0026#34;$PWD/\u0026#34;:/var/www/html \\  php:7.2-apache 参数解释\n --rm：停止运行后，自动删除容器文件。 -p: 将容器的80端口映射到主机的8000端口** --name wordpress：容器的名字叫做wordpress。 --volume \u0026quot;$PWD/\u0026quot;:/var/www/html：将当前目录（$PWD）映射到容器的/var/www/html（Apache 对外访问的默认目录）。因此，当前目录的任何修改，都会反映到容器里面，进而被外部访问到  访问主机+端口 显示如下 Forbidden You don\u0026rsquo;t have permission to access this resource.\nApache/2.4.38 (Debian) Server at 42.192.0.127 Port 8000\n这是因为容器的 /var/www/html 目录（也就是本机的 docker-demo 目录）下面什么也没有，无法提供可以访问的内容。\n请在本机的 docker-demo 目录下面，添加一个最简单的 PHP 文件 index.php。\n\u0026lt;?php phpinfo(); ?\u0026gt;保存以后，浏览器再次访问 IP，应该就会看到熟悉的 phpinfo 页面了。 2 拷贝 WordPress 安装包 既然本地的 docker-demo 目录可以映射到容器里面，那么把 WordPress 安装包拷贝到 docker-demo 目录下，不就可以通过容器访问到 WordPress 的安装界面了吗？\n$ wget https://cn.wordpress.org/latest-zh_CN.tar.gz $ tar -xvf latest-zh_CN.tar.gz 解压以后，WordPress 的安装文件会在 docker-demo/wordpress 目录下。 这时候访问浏览器 http://ip:8000/wordpress 就可以看到如下界面 3 官方的 mysql 容器 WordPress 必须有数据库才能安装，所以必须新建 MySQL 容器。\n打开一个新的命令行窗口，执行下面的命令。\n$ docker container run \\  -d \\  --rm \\  --name wordpressdb \\  --env MYSQL_ROOT_PASSWORD=123456 \\  --env MYSQL_DATABASE=wordpress \\  mysql:5.7 上面的命令会基于 MySQL 的 image` 文件（5.7版本）新建一个容器。该命令的五个命令行参数的含义如下\n -d：容器启动后，在后台运行。 --rm：容器终止运行后，自动删除容器文件。 --name wordpressdb：容器的名字叫做 wordpressdb --env MYSQL_ROOT_PASSWORD=123456：向容器进程传入一个环境变量 MYSQL_ROOT_PASSWORD，该变量会被用作 MySQL 的根密码。 --env MYSQL_DATABASE=wordpress：向容器进程传入一个环境变量 MYSQL_DATABASE，容器里面的 MySQL 会根据该变量创建一个同名数据库（本例是WordPress）。  4 定制 PHP 容器 首先，停掉 WordPress 容器。\n$ docker container stop wordpress 停掉以后，由于 --rm 参数的作用，该容器文件会被自动删除。\n然后，在 docker-demo 目录里面，新建一个 Dockerfile 文件，写入下面的内容。\nFROMphp:7.2-apacheRUN docker-php-ext-install mysqliCMD apache2-foreground上面代码的意思，就是在原来 PHP 的 image 基础上，安装 mysqli 的扩展。然后，启动 Apache。\n基于这个 Dockerfile 文件，新建一个名为 phpwithmysql 的 image 文件。\n$ docker build -t phpwithmysql . 5 定制容器连接 mysql docker container run \\  --rm \\  --name wordpress \\  -p 8000:80 \\  --volume \u0026#34;$PWD/\u0026#34;:/var/www/html \\  --link wordpressdb:mysql \\  phpwithmysql 连接 mysql ···\n弹出如下界面 切换到 wordPress 目录，将上述内容复制\n$ cd /wordpress $ vim wp-config.php 上述类容复制到 wp-config.php 文件中 最后一行加上\n\u0026gt;? 6 其他问题 6.1 安装主体无法连接主机 打开 wp-config.php文件 vim /usr/share/wordpress/wp-config.php,\n在最后面加上\ndefine(\u0026#39;FS_METHOD\u0026#39;, \u0026#34;direct\u0026#34;); 6.2 无法创建目录 无法创建目录通常是没有权限.\nchmod -R 777 wordpress/ 6.3 无法","permalink":"https://hzw9527.github.io/posts/docker/docker_wordpress/","summary":"\u003cp\u003edocker 搭建 wordpress\u003c/p\u003e","title":"Docker_wordpress"},{"content":"一文学习 git commit 规范\n1 Angular 规范 # 结构 \u0026lt;type\u0026gt;[optional scope]: \u0026lt;description\u0026gt; // 空行 [optional body] // 空行 [optional footer(s)] 2 header \u0026lt;type\u0026gt;[optional scope]: \u0026lt;description\u0026gt;` Header 部分只有一行，包括三个字段：type（必选）、scope（可选）和 subject（必选）。\n2.1 type # 代码类 feat | 新增功能 fix | 修复缺陷 perf | 改进性能 style | 代码格式变更, 如格式化代码, 删除空行 # 优化代码 refactor | 不属于上面 4 类的其他变更，如简化代码，重命名变量，删除冗余代码 # 非代码类  test | 更新测试代码 ci | 部署相关变更 docs | 文档变更 docs # 其他 chore 示例\nfix($compile): couple of unit tests for IE9 # Please enter the Commit Message for your changes. Lines starting # with \u0026#39;#\u0026#39; will be ignored, and an empty message aborts the commit. # On branch master # Changes to be committed: # ... Older IEs serialize html uppercased, but IE9 does not... Would be better to expect case insensitive, unfortunately jasmine does not allow to user regexps for throw expectations. Closes #392 Breaks foo.bar api, foo.baz should be used instead 2.2 scope scope 是用来说明 commit 的影响范围的,必须是名词，和具体的项目相关，通常可以按照项目的组件命名，项目初期可以设置粒度比较大的 scope, 可以后续追加\nscope 不适合设置太具体的值，否则字段较多难以维护。 另一方面，开发者也难以确定 commit 属于哪个具体的 scope，导致错放 scope，反而会使 scope 失去了分类的意义\n一个项目参考组件\niam commit message scope\n   scope description     apiserver iam-apiserver 组件相关的变更   authzserver iam-auth-server 组件相关的变更   pump iam-pump 组件相关的变更   iamctl iamctl 组件相关的变更   user iam-apiserver 中 user 模块相关的变更   policy iam-apiserver 中 policy 模块相关的变更   secret iam-apiserver 中 secret 模块相关的变更   pkg pkg 包的变更   docs 文档类变更   changelog CHANGELOG 的变更   makefile Makefile 文件的变更    2.3 subject subject 是 commit 的简短描述，必须动词开头，第一个字母小写，结尾不能加英文句号\n3 body Header 对 commit 高度概括，方便查看 Commit Message。\nbody 是对本地变更的更加详细的描.\nbody 可以分为多行，格式比较自由，必须以动词开头，通常包括修改的动机和相对上一版本的改动点\n4 footer Footer 部分不是必选的，可以根据需要来选择。主要说明本地 commit 导致的后果。\n在实际应用中，Footer 通常用来说明不兼容的改动和关闭的 Issue 列表\n格式如下\nBREAKING CHANGE: \u0026lt;breaking change summary\u0026gt; // 空行 \u0026lt;breaking change description + migration instructions\u0026gt; // 空行 // 空行 Fixes #\u0026lt;issue number\u0026gt; 5 Revert Commit Commit Message 还有一种特殊情况：如果当前 commit 还原了先前的 commit，则应以 revert: 开头\n在 Body 中必须写成 This reverts commit \u0026lt;hash\u0026gt;\nrevert: feat(iam-apiserver): add \u0026#39;Host\u0026#39; option This reverts commit 079360c7cfc830ea8a6e13f4c8b8114febc9b48a. 6 提交频率，合并提交，修改提交信息 6.1 提交频率 提交频率建议下班前提交一次 或者 开发完一个完整的功能提交一次。\n6.2 合并提交 参考 git-rebase.md\ncommit 如果实在太多的话,先撤销过去的 commit，然后再建一个新的。\n$ git reset HEAD~3 $ git add . $ git commit -am \u0026#34;feat(user): add user resource\u0026#34; 一般不建议，过于粗暴，之前的 commit 消息需要重新整理一遍\n6.3 修改提交信息 git commit --amend | 修改最后一次的提交信息 git rebase -i hash | hash 为需要修改的提交信息的父 commit hash ，里面 pick 改为 r 或者 reword ","permalink":"https://hzw9527.github.io/posts/git/commit_specification/","summary":"\u003cp\u003e一文学习 git commit 规范\u003c/p\u003e","title":"Commit_specification"},{"content":"gitignore 规则\ngitignore 规则 / | 以斜杠\u0026#34;/\u0026#34; 开头根目录 * | 通配多字符 ? | 通配单字符 [] | 包含单个字符的匹列表 *.[oa] | 忽略所有以 .o 或者 .a 结尾的文件 !lib.a | 仍然跟踪 lib.a ,即使上一行说了忽略所有的 .a 类型文件 *~ | 忽略所有以 ~a 结尾的文件 /TODO | 只忽略当前的目录的 TODO 文件,而不忽略子目录下的 TODO 文件. 以 / 开头被用于禁止递归匹配 build/ | 忽略 build 目录下的所有文件 doc/*.txt | 忽略 doc/a.txt 而不忽略 doc/server/a.txt doc/**/*.pdf | 忽略 doc 目录下的所有的 PDF 文件 gitignore 修改文件不生效 .gitignore 文件忽略不生效， 原因是 .gitignore 只能忽略那些原来没有被 track 的文件， 如果某些文件已经被纳入了版本管理中，则修改 .gitignore 是无效,先把本地缓存删除（改变成未 track 状态），然后再提交 最好在在你 commit 之后单独修改 .gitignore 文件\n$ git rm -r --cached . $ git add . $ git commit -m \u0026#34;.gitignore update\u0026#34; ","permalink":"https://hzw9527.github.io/posts/git/gitignore/","summary":"\u003cp\u003egitignore 规则\u003c/p\u003e","title":"Gitignore"},{"content":"如何编写单元测试和性能测试用例\n用一些示例来讲解如何编写单元测试和性能测试用例\n1 go 单元测试简介 开发人员确保功能可靠通常要进行单元测试和性能测试。 在 Go 中，我们可以通过testing包对代码进行单元测试和性能测试\n2 如何测试代码 Go 语言有自带的测试框架 testing，可以用来实现单元测试（T 类型）和性能测试（B类型），通过 go test 命令来执行单元测试和性能测试。\ngo test 执行测试用例时，是以 go 包为单位进行测试。 执行时需要指定包名，比如 go test 包名，如果没有指定包名，默认会选择执行命令时所在的包；\rgo test在执行时，会遍历以_test.go结尾的源码文件，执行其中以Test、Benchmark、Example` 开头的测试函数\n3 测试明明规范 3.1 测试文件名规范 Go 的测试文件名必须以 _test.go 结尾。例如，如果我们有一个名为 person.go 的文件，那它的测试文件必须命名为 person_test.go 。这样做是因为，Go 需要区分哪些文件是测试文件。这些测试文件可以被 go test 命令行工具加载，用来测试我们编写的代码，但会被 Go 的构建程序忽略掉，因为 Go 程序的运行不需要这些测试代码。\n3.2 包的命名规范 Go 的测试可以分为白盒测试和黑盒测试。\n 白盒测试：将测试和生产代码放在同一个 Go 包中，这使我们可以同时测试 Go 包中可导出和不可导出的标识符。当我们编写的单元测试需要访问 Go 包中不可导出的变量、函数和方法时，就需要编写白盒测试用例。 将测试和生产代码放在不同的 Go 包中。这时，我们仅可以测试 Go 包的可导出标识符。这意味着我们的测试包将无法访问生产代码中的任何内部函数、变量或常量。  在白盒测试中，Go 的测试包名称需要跟被测试的包名保持一致，例如：person.go 定义了一个 person 包，则 person_test.go 的包名也要为person，这也意味着person.go 和 person_test.go 都要在同一个目录中。\n在黑盒测试中，Go 的测试包名称需要跟被测试的包名不同，但仍然可以存放在同一个目录下。比如，person.go定义了一个 person 包，则 person_test.go 的包名需要跟 person 不同，通常我们命名为 person_test 。\n如果不是需要使用黑盒测试，我们在做单元测试时要尽量使用白盒测试。一方面，这是 go test 工具的默认行为；另一方面，使用白盒测试，我们可以测试和使用不可导出的标识符。\n测试文件和包的命名规范，由 Go 语言及 go test 工具来强制约束\n3.3 函数命名规范 享用多个测试用例测试某个函数，比如 strings.Compare ,可以将测试函数命名为 TestCompareXxx, Xxx 代表 Compare 函数的某个场景描述\nTestCompare、TestCompareIdenticalString、TestCompareStrings`\n3.4 变量命名规范 单元测试用例通常会有一个实际的输出，我们会将预期的输出跟实际的输出进行对比，来判断单元测试是否通过。\n实际输出和预期输出采用如下命令： expected/actual ，或者 got/want\nif c.expected != actual { t.Fatalf(\u0026#34;Expected User-Agent \u0026#39;%s\u0026#39; does not match \u0026#39;%s\u0026#39;\u0026#34;, c.expected, actual) } 4 单元测试 单元测试用例函数以 Test 开头，TestXxx 或 Test_xxx （ Xxx 部分为任意字母数字组合，首字母大写），函数参数必须是 *testing.T。 testing.T 的 Error 、Errorf 、FailNow 、Fatal 、FatalIf 方法，来说明测试不通过；调用 Log 、Logf方法来记录测试信息\ngo test\ngo test 自动搜集所有格式为*_test.go的测试文件，从中提取全部测试函数并执行.\n -v： 显示测试函数的运行细节 -run：选择要执行的函数。go test -v -run='TestA.*' -count=N: 指定测试函数运行的次数，go test -v -run=\u0026lsquo;TestA.*\u0026rsquo; -count=2‘  测试单个文件\ngo test helloworld_test.go 4.1 多个输入的测试用例 一个测试用例中，测试不同的输入和输出，也就是不同的测试用例\nfunc TestAbs_2(t *testing.T) { tests := []struct { x float64 want float64 }{ {-0.3, 0.3}, {-2, 2}, {-3.1, 3.1}, {5, 5}, } for _, tt := range tests { if got := Abs(tt.x); got != tt.want { t.Errorf(\u0026#34;Abs() = %f, want %v\u0026#34;, got, tt.want) } } } assert 也可以使用 assert 判断测试是否通过\nfor _, tt := range tests { got := Abs(tt.x) assert.Equal(t, got, tt.want) } assert 的优势：\n 友好的输出结果，易于阅读，代码更简洁 可以针对每次断言，添加额外的消息说明，例如assert.Equal(t, got, tt.want, \u0026ldquo;Abs test\u0026rdquo;)  5 自动生成单元测试用例 安装 gotests 命令\ngo install github.com/cweill/gotests/... gotests 命令执行格式为：gotests [options] [PATH] [FILE],可以为指定 PATH下的所有 Go 源码文件中的函数生成测试代码，也可以只为某个FILE中的函数生成测试代码。\n进入测试代码目录，生成测试用例\n$ gotests -all -w . 生成后的测试用例只需要补齐 TODO 测试变量即可,\ntests := []struct { name string args args want *LimitAndOffset }{ // TODO: Add test cases.  } 比如下\ntype args struct { offset *int64 limit *int64 } tests := []struct { name string args args want *LimitAndOffset }{ { name: \u0026#34;both offset and limit are not zero\u0026#34;, args: args{ offset: pointer.ToInt64(0), limit: pointer.ToInt64(10), }, want: \u0026amp;LimitAndOffset{ Offset: 0, Limit: 10, }, }, { name: \u0026#34;both offset and limit are zero\u0026#34;, want: \u0026amp;LimitAndOffset{ Offset: 0, Limit: 1000, }, }, { name: \u0026#34;offset not zero and limit zero\u0026#34;, args: args{ offset: pointer.ToInt64(2), }, want: \u0026amp;LimitAndOffset{ Offset: 2, Limit: 1000, }, }, { name: \u0026#34;offset zero and limit not zero\u0026#34;, args: args{ limit: pointer.ToInt64(10), }, want: \u0026amp;LimitAndOffset{ Offset: 0, Limit: 10, }, }, } 6 性能测试  用例函数必须以 Benchmark 开头，例如 BenchmarkXxx 或 Benchmark_Xxx （ Xxx 部分为任意字母数字组合，首字母大写）。 函数参数必须是*testing.B，函数内以b.N作为循环次数，其中N会在运行时动态调整，直到性能测试函数可以持续足够长的时间，以便能够可靠地计时。  示例:\nfunc BenchmarkRandInt(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { RandInt() } } go test 命令默认不会执行性能测试函数,需要配合 -bench \u0026lt;pattern\u0026gt; 才会执行，-bench 后可以跟正则表达式\ngo test -bench=\u0026quot;.*\u0026quot; 表示执行所有的压力测试函数。go test -bench 只会执行压力测试函数，不会执行普通的测试\n$ go test -bench=\u0026#34;.*\u0026#34; goos: windows goarch: amd64 pkg: go-util/pkg/go-test/test cpu: AMD Ryzen 7 5800X 8-Core Processor BenchmarkRandInt-16 287126193 4.154 ns/op PASS ok go-util/pkg/go-test/test 1.785s  BenchmarkRandInt-4，BenchmarkRandInt表示所测试的测试函数名， 16 表示有 16 个 CPU 线程参与了此次测试，默认是GOMAXPROCS的值。 287126193 ，说明函数中的循环执行了90848414次。 4.154 ns/op，说明每次循环的执行平均耗时是 12.8 纳秒，该值越小，说明代码性能越高  重置测试计数\n性能测试函数在执行循环前，如果要做一些耗时的准备工作，需要重置性能测试时间计数。\nfunc BenchmarkBigLen(b *testing.B) { big := NewBig() b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { big.Len() } } 也可以先停止再开始\nfunc BenchmarkBigLen(b *testing.B) { b.StopTimer() // 调用该函数停止压力测试的时间计数  big := NewBig() b.StartTimer() // 重新开始时间  for i := 0; i \u0026lt; b.N; i++ { big.Len() } } 6.1 性能测试函数参数支持  benchmem，输出内存分配统计：  $ go test -bench=\u0026#34;.*\u0026#34; -benchmem goos: windows goarch: amd64 pkg: go-util/pkg/go-test/test cpu: AMD Ryzen 7 5800X 8-Core Processor BenchmarkRandInt-16 286398368 4.193 ns/op 0 B/op 0 allocs/op PASS ok go-util/pkg/go-test/test 1.800s 0 B/op 0 B/op，表示每次执行分配了多少内存（字节），该值越小，说明代码内存占用越小。 0 allocs/op,表示每次执行分配了多少次内存，该值越小，说明分配内存次数越少，意味着代码性能越高。\n benchtime，指定测试时间和循环执行次数（次数格式需要为 Nx，例如 100x,表示100次）  $ go test -bench=\u0026#34;.*\u0026#34; -benchtime=10s goos: windows goarch: amd64 pkg: go-util/pkg/go-test/test cpu: AMD Ryzen 7 5800X 8-Core Processor BenchmarkRandInt-16 1000000000 4.165 ns/op PASS ok go-util/pkg/go-test/test 4.762s // 测试次数 $ go test -bench=\u0026#34;.*\u0026#34; -benchtime=100x goos: windows goarch: amd64 pkg: go-util/pkg/go-test/test cpu: AMD Ryzen 7 5800X 8-Core Processor BenchmarkRandInt-16 100 PASS ok go-util/pkg/go-test/test 0.166s  cpu，指定 GOMAXPROCS。 timeout，指定测试函数执行的超时时间  $ go test -bench=\u0026#34;.*\u0026#34; -timeout=1s -cpu=2 goos: windows goarch: amd64 pkg: go-util/pkg/go-test/test cpu: AMD Ryzen 7 5800X 8-Core Processor BenchmarkRandInt-2 287756878 4.165 ns/op PASS ok go-util/pkg/go-test/test 1.791s ","permalink":"https://hzw9527.github.io/posts/go/go_test/","summary":"\u003cp\u003e如何编写单元测试和性能测试用例\u003c/p\u003e","title":"Go_test"},{"content":"主要讲解 yaml 的基本语法\n1 yaml 简介 1.1 基本语法  大小写敏感 使用缩进表示层级关系 缩进时不允许使用 Tab 键，只允许使用空格。 缩进的空格数目不重要，只要相同层级的元素左侧对齐即可  对于某种语言的库读取 yaml 文件配置时可能大小写并不敏感，这个根据具体的库有关 ,比如 go 语言中的 cobra 就不敏感。\n1. 2 注释 # 表示区块高度# 表示注释，从这个字符一直到行尾，都会被解析器忽略。\n1.3 支持的数据结构  对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary） 数组：一组按次序排列的值，又称为序列（sequence） / 列表（list） 纯量（scalars）：单个的、不可再分的值  2 数据结构 2.1 对象 使用冒号表示\nanimal:pets2.2 数组 子成员是一个数组，则可以在该项下面缩进一个空格。\nlanguages:- Ruby- Perl- Python2.3 纯量 纯量是最基本的、不可再分的值\n# 数值类型number:12.30# 布尔值用 true 和 false 表示。isSet:true# null用~表示。parent:~ 字符串 字符串默认不使用引号表示。\nstr:这是一行字符串如果字符串之中包含空格或特殊字符，需要放在引号之中\n{str: \u0026#39;内容:字符串\u0026#39; }双引号和单引号都可以使用，不会进行转义\ns1:\u0026#39;内容\\n字符串\u0026#39;s2:\u0026#34;内容\\n字符串\u0026#34;单引号之中如果还有单引号，必须连续使用两个单引号转义。\nstr:\u0026#39;内容\u0026#39;\u0026#39;字符串\u0026#39;字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格\nstr: 今天\r天气\r真好 多行字符串可以使用|保留换行符，也可以使用\u0026gt;折叠换行。\nstr:|今天 天气 真好结果为\n今天 天气 真好 str:\u0026gt;今天 天气 真好结果为\n今天天气真好 3 引用 锚点 \u0026amp; 和别名 *，可以用来引用。\ndefaults: \u0026amp;defaults\radapter: postgres\rhost: localhost\rdevelopment:\rdatabase: myapp_development\r\u0026lt;\u0026lt;: *defaults\rtest:\rdatabase: myapp_test\r\u0026lt;\u0026lt;: *defaults 等同于下面代码\ndefaults:\radapter: postgres\rhost: localhost\rdevelopment:\rdatabase: myapp_development\radapter: postgres\rhost: localhost\rtest:\rdatabase: myapp_test\radapter: postgres\rhost: localhost 4 参考连接  YAML 语言教程 ","permalink":"https://hzw9527.github.io/posts/yaml/yaml/","summary":"\u003cp\u003e主要讲解 yaml 的基本语法\u003c/p\u003e","title":"Yaml基本语法"},{"content":"学习创建型模式-抽象工厂\n1 创建型模式-抽象工厂 可以在你不公开内部实现的情况下，让调用者使用你提供的各种功能，\n1.1 示例 定义了一个不可导出的结构体person，在通过 NewPerson 创建实例的时候返回的是接口，而不是结构体。\ntype Person interface { Greet() } type person struct { name string age int } func (p person) Greet() { fmt.Printf(\u0026#34;hi,my name is %s\u0026#34;, p.name) } // NewPerson // Here, NewPerson returns an interface, and not the person struct itself func NewPerson(name string, age int) Person { return person{ name: name, age: age, } } ","permalink":"https://hzw9527.github.io/posts/pattern/abstract_factory/","summary":"\u003cp\u003e学习创建型模式-抽象工厂\u003c/p\u003e","title":"Abstract_factory"},{"content":"学习创建型模式-工厂函数\n1 创建型模式-工厂函数 依赖工厂函数，我们可以通过实现工厂函数来创建多种工厂， 将对象创建从由一个对象负责所有具体类的实例化，变成由一群子类来负责对具体类的实例化，从而将过程解耦。\n1.1 示例 type Person struct { name string age int } func NewPersonFactory(age int) func(name string) Person { return func(name string) Person { return Person{ name: name, age: age, } } } func main() { newBaby := NewPersonFactory(1) baby := newBaby(\u0026#34;alice\u0026#34;) newTeenager := NewPersonFactory(2) teen := newTeenager(\u0026#34;bob\u0026#34;) fmt.Println(baby, teen) } 这种可以用于结构体都有某一类共同的特征，比如 age 都一样，\n","permalink":"https://hzw9527.github.io/posts/pattern/factory_function/","summary":"\u003cp\u003e学习创建型模式-工厂函数\u003c/p\u003e","title":"Factory_function"},{"content":"学习创建型模式-简单工厂模式\n1 简单工厂模式 简单工厂模式是最常用、最简单的。 简单工厂模式可以确保我们创建的实例具有需要的参数，进而保证实例的方法可以按预期执行。\n1.1 示例 type Person struct { Name string Age int } func (p Person) Greet() { fmt.Printf(\u0026#34;hi! my name is %s\u0026#34;, p.Name) } func NewPerson(name string, age int) *Person { return \u0026amp;Person{ Name: name, Age: age, } } 简单工厂模式可以确保我们创建的实例具有需要的参数，进而保证实例的方法可以按预期执行\n","permalink":"https://hzw9527.github.io/posts/pattern/single_factory/","summary":"\u003cp\u003e学习创建型模式-简单工厂模式\u003c/p\u003e","title":"Single_factory"},{"content":"创建型模式-单例模式\n单例模式 once.Do 可以确保当同时有多个创建动作时，只有一个创建动作在被执行\npackage once_do import \u0026#34;sync\u0026#34; type singleton struct { } var ins *singleton var once sync.Once func GetInsOr() *singleton { once.Do(func() { ins = \u0026amp;singleton{} }) return ins } ","permalink":"https://hzw9527.github.io/posts/pattern/single/","summary":"\u003cp\u003e创建型模式-单例模式\u003c/p\u003e","title":"Single"},{"content":"1 安装之前的准备工作  需要安装好 hugo 需要安装好对应的 go 版本，新下载的 hugo 程序可能依赖对应的 go 版本  2 搭建博客 这里以主题 papermod 为例\n2.1 创建你的博客 $ hugo new site blog 2.2 使用 hugo 主题 $ cd blog $ git clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 2.3 修改配置文件 切换到博客根目录， 删除 toml 文件，创建 config.yaml 文件，内容如下\nbaseURL: \u0026#34;https://examplesite.com/\u0026#34; title: ExampleSite paginate: 5 theme: PaperMod enableRobotsTXT: true buildDrafts: false buildFuture: false buildExpired: false googleAnalytics: UA-123-45 minify: disableXML: true minifyOutput: true params: env: production # to enable google analytics, opengraph, twitter-cards and schema. title: ExampleSite description: \u0026#34;ExampleSite description\u0026#34; keywords: [Blog, Portfolio, PaperMod] author: Me # author: [\u0026#34;Me\u0026#34;, \u0026#34;You\u0026#34;] # multiple authors images: [\u0026#34;\u0026lt;link or path of image for opengraph, twitter-cards\u0026gt;\u0026#34;] DateFormat: \u0026#34;January 2, 2006\u0026#34; defaultTheme: auto # dark, light disableThemeToggle: false ShowReadingTime: true ShowShareButtons: true ShowPostNavLinks: true ShowBreadCrumbs: true ShowCodeCopyButtons: false ShowWordCount: true ShowRssButtonInSectionTermList: true UseHugoToc: true disableSpecial1stPost: false disableScrollToTop: false comments: false hidemeta: false hideSummary: false showtoc: false tocopen: false assets: # disableHLJS: true # to disable highlight.js # disableFingerprinting: true favicon: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; favicon16x16: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; favicon32x32: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; apple_touch_icon: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; safari_pinned_tab: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; label: text: \u0026#34;Home\u0026#34; icon: /apple-touch-icon.png iconHeight: 35 # profile-mode profileMode: enabled: false # needs to be explicitly set title: ExampleSite subtitle: \u0026#34;This is subtitle\u0026#34; imageUrl: \u0026#34;\u0026lt;img location\u0026gt;\u0026#34; imageWidth: 120 imageHeight: 120 imageTitle: my image buttons: - name: Posts url: posts - name: Tags url: tags # home-info mode homeInfoParams: Title: \u0026#34;Hi there \\U0001F44B\u0026#34; Content: Welcome to my blog socialIcons: - name: twitter url: \u0026#34;https://twitter.com/\u0026#34; - name: stackoverflow url: \u0026#34;https://stackoverflow.com\u0026#34; - name: github url: \u0026#34;https://github.com/\u0026#34; analytics: google: SiteVerificationTag: \u0026#34;XYZabc\u0026#34; bing: SiteVerificationTag: \u0026#34;XYZabc\u0026#34; yandex: SiteVerificationTag: \u0026#34;XYZabc\u0026#34; cover: hidden: true # hide everywhere but not in structured data hiddenInList: true # hide on list pages and home hiddenInSingle: true # hide on single page editPost: URL: \u0026#34;https://github.com/\u0026lt;path_to_repo\u0026gt;/content\u0026#34; Text: \u0026#34;Suggest Changes\u0026#34; # edit text appendFilePath: true # to append file path to Edit link # for search # https://fusejs.io/api/options.html fuseOpts: isCaseSensitive: false shouldSort: true location: 0 distance: 1000 threshold: 0.4 minMatchCharLength: 0 keys: [\u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;content\u0026#34;] menu: main: - identifier: categories name: categories url: /categories/ weight: 10 - identifier: tags name: tags url: /tags/ weight: 20 - identifier: example name: example.org url: https://example.org weight: 30 # Read: https://github.com/adityatelange/hugo-PaperMod/wiki/FAQs#using-hugos-syntax-highlighter-chroma # pygmentsUseClasses: true # markup: # highlight: # # anchorLineNos: true # codeFences: true # guessSyntax: true # lineNos: true # style: monokai 3 发布文章 3.1 发布文章 $ cd blog $ hugo new posts/git.md 3.2 本地预览 $ cd blog $ hugo server -D 3.3 修改默认生成的文章模板 $ cd blog $ mkdir archetypes 在 archetypes 目录下新建 default.md, 内容如下\n---title:\u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34;\u0026#34; | title }}\u0026#34;date:{{.Date }}categories:[\u0026#34;123\u0026#34;]tags:[\u0026#34;123\u0026#34;]slug:\u0026#34;\u0026#34;draft:true---4 博客样式改动 4.1 修改字体 /blog/themes/PaperMod/assets/css/core/reset.css 4.2 修改代码样式 /blog/themes/PaperMod/assets/css/common/archive.css 修改 code 样式\n.post-content pre code { } ","permalink":"https://hzw9527.github.io/posts/blog/blog_install/","summary":"1 安装之前的准备工作  需要安装好 hugo 需要安装好对应的 go 版本，新下载的 hugo 程序可能依赖对应的 go 版本  2 搭建博客 这里以主题 papermod 为例\n2.1 创建你的博客 $ hugo new site blog 2.2 使用 hugo 主题 $ cd blog $ git clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 2.3 修改配置文件 切换到博客根目录， 删除 toml 文件，创建 config.yaml 文件，内容如下\nbaseURL: \u0026#34;https://examplesite.com/\u0026#34; title: ExampleSite paginate: 5 theme: PaperMod enableRobotsTXT: true buildDrafts: false buildFuture: false buildExpired: false googleAnalytics: UA-123-45 minify: disableXML: true minifyOutput: true params: env: production # to enable google analytics, opengraph, twitter-cards and schema.","title":"Blog_install"},{"content":"git merge 1 git merge 默认操作 创建 develop 分支 基于 develop 分支创建 feature/print-1 分支\ngit checkout -b feature/print-1 develop 完成 feature/print-1 分支开发，有两个提交，当前视图如下\n切换到 develop 分支 merge feature/print-1 分支\ngit merge feature/print-1 视图如下\n2 git merge \u0026ndash;no-ff 基于 develop 分支创建了feature-print2 分支，完成两次提交 add3 add4 后切换到\ndevelop 分支，紧接着合并 feature-print2,\ngit merge --no-ff feature/print-2 3 git merge \u0026ndash;squash 基于 develop 分支创建了feature-print3 分支，完成两次提交 print3-1 print3-2 后切换到\ndevelop 分支，紧接着合并 feature-print3,\ngit merge --squash feature/print-2 4 git merge 示意图 git merge 默认操作 git merge \u0026ndash;no-ff git merge \u0026ndash;squash ","permalink":"https://hzw9527.github.io/posts/git/git_merge/","summary":"git merge 1 git merge 默认操作 创建 develop 分支 基于 develop 分支创建 feature/print-1 分支\ngit checkout -b feature/print-1 develop 完成 feature/print-1 分支开发，有两个提交，当前视图如下\n切换到 develop 分支 merge feature/print-1 分支\ngit merge feature/print-1 视图如下\n2 git merge \u0026ndash;no-ff 基于 develop 分支创建了feature-print2 分支，完成两次提交 add3 add4 后切换到\ndevelop 分支，紧接着合并 feature-print2,\ngit merge --no-ff feature/print-2 3 git merge \u0026ndash;squash 基于 develop 分支创建了feature-print3 分支，完成两次提交 print3-1 print3-2 后切换到\ndevelop 分支，紧接着合并 feature-print3,\ngit merge --squash feature/print-2 4 git merge 示意图 git merge 默认操作 git merge \u0026ndash;no-ff git merge \u0026ndash;squash ","title":"Git_merge"},{"content":"git flow工作流\n1 git flow 的 5 个分支情况 2 git flow 的工作流程 2.1 场景如下  当前版本为 0.9。0 需要开发一个功能，使程序打印标准输出 hello world 字符串。 在开发阶段，线上代码有 Bug 需要紧急修复  2.2 1 创建一个常住分支： develop\n$ git checkout -b develop master 2 基于 develop 分支创建一个新的功能分支：feature/print-hello-world\n$ git checkout -b feature/print-hello-world develop 3 feature/print-hello-world 分支中，在 main.go 文件中添加一行代码 fmt.Println(\u0026quot;Hello\u0026quot;)，添加后的代码如下\npackage main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;callmainfunction\u0026#34;) fmt.Println(\u0026#34;Hello\u0026#34;) } 4 紧急修复 bug，我们正处在新功能的开发中（只完成了 fmt.Println(\u0026ldquo;Hello\u0026rdquo;)而非 fmt.Println(\u0026ldquo;Hello World\u0026rdquo;)）突然线上代码发现了一个 Bug，我们要立即停止手上的工作，修复线上的 Bug，步骤如下\n$ git stash # 1. 开发工作只完成了一半，还不想提交，可以临时保存修改至堆栈区 $ git checkout -b hotfix/print-error master # 2. 从 master 建立 hotfix 分支 $ vi main.go # 3. 修复 bug，callmainfunction -\u0026gt; call main function $ git commit -a -m \u0026#39;fix print message error bug\u0026#39; # 4. 提交修复 $ git checkout develop # 5. 切换到 develop 分支 $ git merge --no-ff hotfix/print-error # 6. 把 hotfix 分支合并到 develop 分支 $ git checkout master # 7. 切换到 master 分支 $ git merge --no-ff hotfix/print-error # 8. 把 hotfix 分支合并到 master $ git tag -a v0.9.1 -m \u0026#34;fix log bug\u0026#34; # 9. master 分支打 tag $ go build -v . # 10. 编译代码，并将编译好的二进制更新到生产环境 $ git branch -d hotfix/print-error # 11. 修复好后，删除 hotfix/xxx 分支 $ git checkout feature/print-hello-world # 12. 切换到开发分支下 $ git merge --no-ff develop # 13. 因为 develop 有更新，这里最好同步更新下 $ git stash pop # 14. 恢复到修复前的工作状态 5 继续开发 在 main.go 中加入 fmt.Println(\u0026quot;Hello World\u0026quot;)。\n6 提交代码到 feature/print-hello-world 分支。\n$ git commit -a -m \u0026#34;print \u0026#39;hello world\u0026#39;\u0026#34; 7 在 feature/print-hello-world 分支上做 code review。首先，我们需要将 feature/print-hello-world push 到代码托管平台，例如 GitHub 上\n8 code review 通过后，由代码仓库 matainer 将功能分支合并到 develop 分支。\n9 基于 develop 分支，创建 release 分支，测试代码。\n$ git checkout -b release/1.0.0 develop $ go build -v . # 构建后，部署二进制文件，并测试 10 测试失败，因为我们要求打印“hello world”，但打印的是“Hello World”，修复的时候， 我们直接在 release/1.0.0 分支修改代码，修改完成后，提交并编译部署\n$ git commit -a -m \u0026#34;fix bug\u0026#34; $ go build -v . 11 测试通过后，将功能分支合并到 master 分支和 develop 分支。\n$ git checkout develop $ git merge --no-ff release/1.0.0 $ git checkout master $ git merge --no-ff release/1.0.0 $ git tag -a v1.0.0 -m \u0026#34;add print hello world\u0026#34; # master 分支打 tag 12 删除 feature/print-hello-world 分支，也可以选择性删除 release/1.0.0 分支\n$ git branch -d feature/print-hello-world ","permalink":"https://hzw9527.github.io/posts/git/git_flow/","summary":"\u003cp\u003egit flow工作流\u003c/p\u003e","title":"Git_flow"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code    Code Blocks Inline Code This is Inline Code\nOnly pre \rThis is pre text\r\rCode block with backticks \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; Code block with backticks and language specified 1 2 3 4 5 6 7 8 9 10 11  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;Sample article showcasing basic Markdown syntax and formatting for HTML elements.\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Code block indented with four spaces \u0026lt;!doctype html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Gist  List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","permalink":"https://hzw9527.github.io/posts/markdown-syntax/","summary":"\u003cp\u003eThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\u003c/p\u003e","title":"Markdown Syntax Guide"},{"content":"","permalink":"https://hzw9527.github.io/posts/rich-content/","summary":"","title":"Rich Content"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates (extend_head.html) like so: refer ISSUE #236  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }}  To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files  Note: Use the online reference of Supported TeX Functions\n\r\rExamples \rInline math: \\(\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…\\)\rBlock math:\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","permalink":"https://hzw9527.github.io/posts/math-typesetting/","summary":"\u003cp\u003eMathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\u003c/p\u003e","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 🙈 🙉 🙉 🙊 🙊\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\n N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } \r.emojify {\rfont-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols;\rfont-size: 2rem;\rvertical-align: middle;\r}\r@media screen and (max-width:650px) {\r.nowrap {\rdisplay: block;\rmargin: 25px 0;\r}\r}\r","permalink":"https://hzw9527.github.io/posts/emoji-support/","summary":"\u003cp\u003eEmoji can be enabled in a Hugo project in a number of ways.\u003c/p\u003e","title":"Emoji Support"}]